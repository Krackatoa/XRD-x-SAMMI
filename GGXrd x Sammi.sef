[extension_name]
Guilty Gear Xrd x Sammi
[extension_info]
With Pangaea's Rev2Mod installed, pipe live gamestate data from Guilty Gear Xrd: Rev 2 (Steam Version) directly into Sammi.
[extension_version]
1.0
[insert_external]
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
    const Xrd_Websocket_Names = [];
    const Xrd_Websockets = [];
	var Xrd_Data = "";
	var Xrd_Connected = 0;
	
</script>
<div class="row">
  <div class="col-12 col-md-8 col-lg-6 mx-auto">
    <div class="card bg-dark text-white">
      <div class="card-header">
        <h3>Guilty Gear Xrd x Sammi</h3>
        <div class="d-flex justify-content-between align-items-center">
          <h5>Version: 1.0</h5>
          <a href="https://github.com/super-continent/ggxrd-mod/" class="btn btn-dark" target="_blank" rel="noopener noreferrer">Download Mod Here</a>
        </div>
      </div>
      <div class="card-body">
        <h4 class="card-title">Overview</h4>
        <p class="card-text">Trigger Sammi events from Xrd. <br>Made possible by Pangaea's Guilty Gear Rev2 Hook.</p>
        <hr>
		<h4 class="card-title">Instructions</h4>
		<p>Connect to Xrd via the <i>Create Xrd Websocket</i> command, then make use of the following Extension Triggers, paired with the <i>Trigger Pull Data</i> command:</p>
		<p><i>ggxrd_stateUpdate</i> - General game updates. 60Hz tick rate.<br><br>
		<i>ggxrd_hitEvent</i> - On Hit and On Block events.<br><br>
		<i>ggxrd_objectCreatedEvent</i> - On Projectile/Object Generation.<br><br>
		<i>ggxrd_comboEndEvent</i> - On Combo End.<br><br>
		<i>ggxrd_roundStartEvent</i> - On Round Start.<br><br>
		<i>ggxrd_roundEndEvent</i> - On Round End.<br><br>
		<i>ggxrd_gamestateDeinitialized</i> - Dedicated event for when you leave gameplay.</p>
		<p>Note: These triggers only occur during gameplay.</p>
		<hr>
		<h4 class="card-title">Bonus Functionality</h4>
		<p>Included is a prototype <i>Xrd Moveset Interpreter</i> that will convert the raw character and object states into their most-likely spoken name, numpad notation, or Text-To-Speech-friendly spelling. Feel free to edit this extension at your whismy if you want to alter this functionality. It's pretty easy</p>
		<hr>
		<h4 class="card-title">Socials</h4>
        <p>Extension created by Krackatoa. Follow me on:</p>
        <div class="social-icons">
			<a href="https://bsky.app/profile/krackatoa.ca" style="text-decoration: none;" target="_blank" rel="noopener noreferrer">Bluesky</a><br>
			<a href="https://twitch.tv/krackatoa" style="text-decoration: none;" target="_blank" rel="noopener noreferrer">Twitch</a><br>
			<a href="https://youtube.com/krackatoa" style="text-decoration: none;" target="_blank" rel="noopener noreferrer">YouTube</a><br>
			<a href="http://www.twitter.com/koryuken" style="text-decoration: none;" target="_blank" rel="noopener noreferrer">Twitter</a><br><br>		
        </div>
		<p>Mod created by Pangaea. Follow them on:</p>
        <div class="social-icons">
			<a href="https://bsky.app/profile/toptwentynotes.bsky.social" style="text-decoration: none;" target="_blank" rel="noopener noreferrer">Bluesky</a><br>
			<a href="https://twitter.com/TopTwentyNotes" style="text-decoration: none;" target="_blank" rel="noopener noreferrer">Twitter</a><br>			
        </div>
      </div>
      <div class="card-footer">
        <small>Last updated: 2024-11-19, Websocket Extension Code by failstream.</small>
      </div>
    </div>
  </div>
</div>
[insert_command]
// Create an example command for the extension
/*
SAMMI.extCommand('Guilty Gear Xrd Data', 3355443, 52, {
    exampleBox: ['Save Xrd As', 14, 'a_frame_of_xrd']
});*/
SAMMI.extCommand('Create Xrd Websocket', 3355443, 52, {
    name: ['Choose Your Websocket Name', 14, 'xturd', 1],
    url: ['Websocket URL (Xrd Webserver)', 14, 'ws://localhost:6651', 1],
    buttonID: ['Data Button', 14, 'Xrd_Data', 1],
    status: ['status variable', 14, '', 1],
    error: ['error variable', 14, '', 1],
    msg: ['message variable', 14, '', 1]
});
/*
SAMMI.extCommand('Remove Xrd Websocket', 3355443, 52, {
    name: ['unique name for websocket', 14, '', 1]
});


SAMMI.extCommand('Send Message To Xrd Websocket', 3355443, 52, {
    name: ['unique name for websocket', 14, 'xturd', 1],
    msg: ['message for websocket', 14, 'xturd', 1],
    rsp: ['save response as variable', 14, 'response', 1],
    buttonID: ['button variable belongs to', 14, 'test', 1]
});
*/
SAMMI.extCommand('Xrd Moveset Interpreter', 3355443, 52, {
	mode:['Mode', 19, 'Real Name', null,['Real Name','Numpad','TTS Friendly']],
	character: ['Character Filter', 20, 'all', null,['all','Answer','Axl','Baiken','Bedman','Chipp','Dizzy','Elphelt','Faust','Ino','JackO','Jam','Johnny','Kum','Ky','Leo','May','Millia','Potemkin','Ramlethal','Raven','Sin','Slayer','Sol','Venom','Zato-1'] ,1],
	state: ['Character State', 14, '', 1],
	returnVariable: ['Return Variable', 14, '', 1],
});

/*SAMMI.extCommand('Upload to Imgur', 3355443, 52, {
	filepath: ['File Path', 14, '', 1],
	returnVariable: ['Return',14,'',1]
});*/

//SAMMI.extCommand('Print All Xrd Connections', 3355443, 30);

// Call the main function when the extension loads
main();
[insert_hook]
[insert_script]
async function websocketCreate(name, url, buttonID, status, error, msg) {
   try {
		
        if (!name) {
            throw 'Websocket: name field is not optional!';
        } else if (!url) {
            throw 'Websocket: url field is not optional!';
        } else if (!status) {
            throw 'Websocket: status field is not optional!';
        } else if (!buttonID) {
            throw 'Websocket: buttonID field is not optional!';
        }

        let nameExists = Xrd_Websocket_Names.indexOf(name);
		
        if (nameExists == -1) {
            Xrd_Websocket_Names.push(name);
            let i = Xrd_Websocket_Names.indexOf(name);
            Xrd_Websockets[i] = new WebSocket(url);
            Xrd_Websockets[i].onopen = function (event) {
                //printAllConnections();
                if (status) {
                    SAMMI.setVariable(status, "connected", "Xrd_Connect");
                }
				
				if(Xrd_Connected == 0)
				{
					SAMMI.alert('Xrd has connected!');
					Xrd_Connected = 1;
				}
					
                
            };
            Xrd_Websockets[i].onclose = function (event) {
                if (status) 
				{
                    SAMMI.setVariable(status, "disconnected", "Xrd_Connect");
					if(Xrd_Connected == 1)
					{
						SAMMI.alert('Xrd has disconnected!');
						Xrd_Connected = 0;
					}					
					websocketRemove(Xrd_Websocket_Names[i]);
					Xrd_Websocket_Names.splice(i, 1);
					SAMMI.triggerButton("Xrd_Connect");
				}
				
                //printAllConnections();
            };
            Xrd_Websockets[i].onerror = function (event) {
                //document.getElementById('websocket-errors').innerHTML = 'Error with ' + name + '.';
                if (error) {
                    SAMMI.setVariable(error, event, "Xrd_Connect");
                }
                //SAMMI.alert('websocket ' + name + ' has had an error.');
            };
			
            Xrd_Websockets[i].onmessage = function (event) {
                if (msg) {
					//This is where you set up the logic for incoming info.
					
					
					obj = JSON.parse(event.data);
					//if(obj.event == "ggxrd_stateUpdate" && obj.data.current_frame % 2 == 0)
					if(obj.event == "ggxrd_stateUpdate")
					{
						SAMMI.setVariable("data", obj, Xrd_Data);
						//SAMMI.triggerExt('ggxrd_stateUpdate', {data: event.data});
						//SAMMI.triggerExt('ggxrd_emptyStateUpdate');
						
					}
					else if(obj.event == "ggxrd_hitEvent")
					{
						SAMMI.triggerExt('ggxrd_hitEvent', {data: obj});
					}
					else if(obj.event == "ggxrd_objectCreatedEvent")
					{
						SAMMI.triggerExt('ggxrd_objectCreatedEvent', {data: obj});
					}
					else if(obj.event == "ggxrd_roundStartEvent")
					{
						SAMMI.triggerExt('ggxrd_roundStartEvent', {data: obj});
					}
					else if(obj.event == "ggxrd_roundEndEvent")
					{
						SAMMI.triggerExt('ggxrd_roundEndEvent', {data: obj});
					}
					else if(obj.event == "ggxrd_comboEndEvent")
					{
						SAMMI.triggerExt('ggxrd_comboEndEvent', {data: obj});
					}
					else if(obj.event == "ggxrd_gamestateDeinitialized")
					{
						SAMMI.triggerExt('ggxrd_gamestateDeinitialized', {data: obj});
					} else
					{
						SAMMI.triggerExt('ggxrd_unknownEvent', {data: obj});
					}
					
                }
				
            };
        } else {
            throw 'Xrd is already connected: ' + name;
        } 

    } catch (e) {
        SAMMI.alert(e);
    }
}

async function websocketMessage(name, msg, rsp, buttonID) {
    try {

        if (!name) {
            throw 'Websocket: name field is not optional!';
        } else if (!msg) {
            throw 'Websocket: message field is not optional!';
        } else if (!buttonID) {
            throw 'Websocket: buttonID field is not optional!';
        }

        let i = Xrd_Websocket_Names.indexOf(name);
        if (i != -1) {
            if (rsp) {
                Xrd_Websockets[i].send(msg);
                Xrd_Websockets[i].addEventListener('message', function (event) {
                    //document.getElementById('websocket-messages').innerHTML = 'Received a message from ' + name + '.<br>Check ' + buttonID + '.' + rsp + ' for data.';
                    SAMMI.setVariable(rsp, event.data, buttonID);
                }, {once: true});
            } else {
                Xrd_Websockets[i].send(msg);
            }
        } else {
            throw 'This websocket name: ' + name + ' does not exist! Cannot send message.';
        }

    } catch (e) {
        SAMMI.alert(e);
    }
}

function printAllConnections() {
   let text = '';
   for (i = 0; i < Xrd_Websocket_Names.length; i++) {
       text = text + Xrd_Websocket_Names[i] + ' is Connected! <br>';
   }
   //document.getElementById('websocket-connections').innerHTML = text;
}

function websocketRemove(name) {
    try {
        if (!name) {
            throw 'cannot remove websocket without a name!';
        }
        let i = Xrd_Websocket_Names.indexOf(name);
        if (i != -1) {
            Xrd_Websockets[i].close();
        } else {
            throw 'This websocket name: ' + name + ' does not exist! Cannot remove.';
        }
    } catch(e) {
        SAMMI.alert(e)
    }
}

function main() {
    console.log("Extension connected to SAMMI Bridge");
    //SAMMI.alert("Xturd.");
	sammiclient.on('Guilty Gear Xrd Data', (payload) => {
		
        console.log("Command triggered", payload);
        // get the button ID from the payload which SAMMI sent to the extension
        const { FromButton }  = payload.Data 
        // Get the value of the example extension box from the payload we set up earlier
        const exampleBoxValue = payload.Data.exampleBox
        // Here we can do something with the value, like append some text to it and send it back to SAMMI
        const stateVariable = "A single frame of xrd";
        // Send the modified value back to SAMMI by setting the variable value in the button that triggered the command
        SAMMI.setVariable('stateUpdate', stateVariable, FromButton)
        // We can also ask SAMMI to return the value of a variable from a button
        SAMMI.getVariable('stateUpdate', FromButton).then((data) => {
            console.log("Variable value returned from SAMMI", data.Value);
        });
    });
	sammiclient.on('Create Xrd Websocket', (payload) => {
		//SAMMI.alert("Connecting to Xrd.");
		websocketCreate(payload.Data.name, payload.Data.url, payload.Data.buttonID, payload.Data.status, payload.Data.error, payload.Data.msg);
		Xrd_Data = payload.Data.buttonID;
	});
	sammiclient.on('Remove Xrd Websocket', (payload) => {
		//SAMMI.alert("Remove Xturd Websocket");
		websocketRemove(payload.Data.name);
	});
	
	sammiclient.on('Send Message To Xrd Websocket', (payload) => {
		//SAMMI.alert("Send Message to Xturd Websocket");
		websocketMessage(payload.Data.name, payload.Data.msg, payload.Data.rsp, payload.Data.buttonID);
	});
	
	sammiclient.on('Print All Xrd Connections', (payload) => {
		printAllConnections();
	});
/*	
	sammiclient.on('Xrd CSV Moveset Interpreter', (payload) => {
		const { FromButton } = payload.Data;
		const state = playload.Data.state;
		SAMMI.SetVariable('input', state, 'Xrd_CSV_Moveset_Interpreter');
		SAMMI.SetVariable('
		SAMMI.triggerButton('Xrd_CSV_Moveset_Interpreter');	
	}
	
	sammiclient.on('Xrd CSV Moveset Processor', (payload) =>
	{
		const { FromButton } = payload.Data;
	}*/
	
	sammiclient.on('Xrd Moveset Interpreter', (payload) => {
		const { FromButton } = payload.Data;
		const state = payload.Data.state;
		const returnVariable = payload.Data.returnVariable;
		const mode = payload.Data.mode;

		character = payload.Data.character;
		output = state;
		foundException = 0;
		
		switch (character.toLowerCase())
		{
			case "all": character = "all"; break;
			case "answer": character = "Answer"; break;
			case "axl": character = "Axl"; break;
			case "baiken": character = "Baiken"; break;
			case "bedman": character = "Bedman"; break;
			case "chipp": character = "Chipp"; break;
			case "dizzy": character = "Dizzy"; break;
			case "elphelt": character = "Elphelt"; break;
			case "faust": character = "Faust"; break;
			case "ino": character = "Ino"; break;
			case "i-no": character = "Ino"; break;
			case "jacko": character = "JackO"; break;
			case "jack-o": character = "JackO"; break;
			case "jack-o'": character = "JackO";
			case "jam": character = "Jam"; break;
			case "johnny": character = "Johnny"; break;
			case "johnny sfondi": character = "Johnny"; break;
			case "kum": character = "Kum"; break;
			case "kum haehyun": character = "Kum"; break;
			case "haehyun": character = "Kum"; break;
			case "ky": character = "Ky"; break;
			case "kyle": character = "Ky"; break;
			case "ky kiske": character = "Ky"; break;
			case "leo": character = "Leo"; break;
			case "leo whitefang": character = "Leo"; break;
			case "may": character = "May"; break;
			case "millia rage": character = "Millia"; break;
			case "millia": character = "Millia"; break;
			case "potemkin": character = "Potemkin"; break;
			case "pot": character = "Potemkin"; break;
			case "ramlethal": character = "Ramlethal"; break;
			case "ram": character = "Ramlethal"; break;
			case "raven": character = "Raven"; break;
			case "sin": character = "Sin"; break;
			case "slayer": character = "Slayer"; break;
			case "sol": character = "Sol"; break;
			case "sol badguy": character = "Sol"; break;
			case "venom": character = "Venom"; break;
			case "pepperysplash": character = "Venom"; break;
			case "zato-one": character = "Zato"; break;
			case "zato=1": character = "Zato"; break;
			case "zato": character = "Zato"; break;
			default: character = "all"; break;
		}
		
		
			//Universal & Common States
			
		if (state.includes("CmnAct"))
		{
			if (mode == "Numpad")
			{
				switch(state)
				{
					case "CmnActFDash": output = "66"; break;
					case "CmnActBDash": output = "44"; break;
					case "CmnActRomanCancel": output = "RC"; break;
					case "CmnActAirBDash": output = "44"; break;
					case "CmnActAirFDash": output = "66"; break;
					case "CmnActJump": output = "^"; break;
					case "CmnActJumpPre": output = "^"; break;
					case "CmnActJumpLanding": output = "v"; break;
				}
			} 
			else if (mode == "Real Name" || mode == "TTS Friendly")
			{
				switch(state)
				{
					case "CmnActStand": output = "Standing"; break;
					case "CmnActCrouch": output = "Crouching"; break;
					case "CmnActJump": output = "Jumping"; break;
					case "CmnActJumpPre": output = "Prejump"; break;
					case "CmnActFWalk": output = "Forward Walk"; break;
					case "CmnActBWalk": output = "Back Walk"; break;
					case "CmnActFDash": output = "Forward Dash"; break;
					case "CmnActBDash": output = "Backdash"; break;
					case "CmnActAirFDash": output = "Airdash"; break;
					case "CmnActAirBDash": output = "Air Backdash"; break;
					case "CmnActFDashStop": output = "Runstop"; break;
					case "CmnActUkemi": output = "Air Tech"; break;
					case "CmnActMidGuardLoop": output = "Stand Block"; break;
					case "CmnActCrouchGuardLoop": output = "Crouch Block"; break;
					case "CmnActAirGuardLoop": output = "Air Block"; break;
					case "CmnActHajikareAir": output = "Air Blitz Reject"; break;
					case "CmnActHajikareStand": output = "Blitz Reject"; break;
					case "CmnActRomanCancel": output = "Roman Cancel"; break;
					case "CmnActJitabataLoop":output = "Stagger"; break;
					case "CmnActKizetsu":output = "Stun"; break;
					case "CmnActBurst": output = "Burst"; break;
					case "CmnActStand2Crouch": output = "Crouching"; break;
					case "CmnActCrouch2Stand": output = "Standing"; break;
					case "CmnActJumpLanding": output = "Landing"; break;
					case "CmnActLandingStiff": output = "Extra Landing Frames"; break;
					case "CmnActCrouchGuardEnd": output = "Crouching"; break;
					case "CmnActMidGuardEnd": output = "Standing"; break;
					case "CmnActAirGuardEnd": output = "Jumping"; break;
				}
			}
		}
		
		//Hitstun Detection		
		if (state.includes("Nokezori") && state == output && foundException == 0)
		{
			if(state.includes("Crouch"))
			{
				output = "Crouching Hitstun";
			} else
			{
				output = "Standing Hitstun";
			}
		}
		
		//Other General States
		if(state == output)
		{
			switch(state)
			{
				case "ThrowExe": output = "Throw"; break;
			}
		}
		//Blitz Detection, prioritize 
		if(mode == "Numpad" )
		{
			if (state.includes("Counter"))
			{
				switch(state)
				{
					case "CounterGuardStand": output = "S+H"; break;
					case "CounterGuardCrouch": output = "2S+H"; break;
					case "CounterGuardAir": output = "jS+H"; break;				
				}
			}
		} else if (mode == "Real Name" || mode == "TTS Friendly")
		{
			if (state.includes("Counter"))
			{
				switch(state)
				{
					case "CounterGuardStand": output = "Stand Blitz"; break;
					case "CounterGuardCrouch": output = "Crouch Blitz"; break;
					case "CounterGuardAir": output = "Air Blitz"; break;				
				}
			}
		}
		
		//Attack States
		if (mode == "Numpad" || mode == "Real Name")
		{
			if (state.includes("NmlAtkAir"))
			{
				switch(state)
				{
					case "NmlAtkAir5A": output = "jP"; break;
					case "NmlAtkAir5B": output = "jK"; break;
					case "NmlAtkAir5C": output = "jS"; break;
					case "NmlAtkAir5D": output = "jH"; break;
					case "NmlAtkAir5E": output = "jD"; break;
					case "NmlAtkAir2A": output = "j2P"; break;
					case "NmlAtkAir2B": output = "j2K"; break;
					case "NmlAtkAir2C": output = "j2S"; break;
					case "NmlAtkAir2D": output = "j2H"; break;
					case "NmlAtkAir2E": output = "j2D"; break;
				}				
			} 
		}
		
		if (state.includes("NmlAtk"))
		{
			//Priortize Numpad
			if (mode == "Numpad" && state == output && foundException == 0)
			{
				switch(state)
				{
					case "NmlAtk5CFar": output = "fS"; break;
					case "NmlAtk5CNear": output = "cS"; break;
					case "NmlAtk5CFar_Guard": output = "S>P"; break;
					case "NmlAtk5D_Guard": output = "H>P"; break;
				}
			}

			if (mode == "Real Name" || mode == "Numpad" && state == output && foundException == 0)
			{
				switch(state) 
				{
					case "NmlAtk5CFar": output = "Far S"; break;
					case "NmlAtk5A": output = "5P";	break;
					case "NmlAtk5B": output = "5K"; break;
					case "NmlAtk5C": output = "5S"; break;
					case "NmlAtk5CNear": output = "Close S"; break;
					case "NmlAtk5D": output = "5H"; break;
					case "NmlAtk5E": output = "5D"; break;				
					case "NmlAtk2A": output = "2P";	break;
					case "NmlAtk2B": output = "2K"; break;
					case "NmlAtk2C": output = "2S"; break;
					case "NmlAtk2D": output = "2H"; break;
					case "NmlAtk2E": output = "2D"; break;				
					case "NmlAtk6A": output = "6P";	break;
					case "NmlAtk6B": output = "6K"; break;
					case "NmlAtk6C": output = "6S"; break;
					case "NmlAtk6D": output = "6H"; break;
					case "NmlAtk6E": output = "6D"; break;
					case "NmlAtk4A": output = "4P";	break;
					case "NmlAtk4B": output = "4K"; break;
					case "NmlAtk4C": output = "4S"; break;
					case "NmlAtk4D": output = "4H"; break;
					case "NmlAtk4E": output = "4D"; break;				
					case "NmlAtk3A": output = "3P";	break;
					case "NmlAtk3B": output = "3K"; break;
					case "NmlAtk3C": output = "3S"; break;
					case "NmlAtk3D": output = "3H"; break;
					case "NmlAtk3E": output = "3D"; break;			
					case "NmlAtk1A": output = "1P";	break;
					case "NmlAtk1B": output = "1K"; break;
					case "NmlAtk1C": output = "1S"; break;
					case "NmlAtk1D": output = "1H"; break;
					case "NmlAtk1E": output = "1D"; break;
					//Leo Exception
					case "NmlAtk5CFar_Guard": output = "S Guardpoint P"; break;
					case "NmlAtk5D_Guard": output = "H Guardpoint P"; break;
					//Raven Exception
					case "NmlAtk4AHasei": output = "4P"; break;
				}
			}
			
			 
			
			if (mode == "TTS Friendly" && state == output && foundException == 0)
			{
				switch(state) 
				{
					case "NmlAtk5CFar": output = "Far S"; break;
					case "NmlAtk5A": output = "Five P";	break;
					case "NmlAtk5B": output = "Five K"; break;
					case "NmlAtk5C": output = "Five S"; break;
					case "NmlAtk5CNear": output = "Close S"; break;
					case "NmlAtk5D": output = "Five H"; break;
					case "NmlAtk5E": output = "Five D"; break;				
					case "NmlAtk2A": output = "Two P";	break;
					case "NmlAtk2B": output = "Two K"; break;
					case "NmlAtk2C": output = "Two S"; break;
					case "NmlAtk2D": output = "Two H"; break;
					case "NmlAtk2E": output = "Two D"; break;				
					case "NmlAtk6A": output = "Six P";	break;
					case "NmlAtk6B": output = "Six K"; break;
					case "NmlAtk6C": output = "Six S"; break;
					case "NmlAtk6D": output = "Six H"; break;
					case "NmlAtk6E": output = "Six D"; break;
					case "NmlAtk4A": output = "Four P";	break;
					case "NmlAtk4B": output = "Four K"; break;
					case "NmlAtk4C": output = "Four S"; break;
					case "NmlAtk4D": output = "Four H"; break;
					case "NmlAtk4E": output = "Four D"; break;				
					case "NmlAtk3A": output = "Three P"; break;
					case "NmlAtk3B": output = "Three K"; break;
					case "NmlAtk3C": output = "Three S"; break;
					case "NmlAtk3D": output = "Three H"; break;
					case "NmlAtk3E": output = "Three D"; break;			
					case "NmlAtk1A": output = "One P";	break;
					case "NmlAtk1B": output = "One K"; break;
					case "NmlAtk1C": output = "One S"; break;
					case "NmlAtk1D": output = "One H"; break;
					case "NmlAtk1E": output = "One D"; break;
					//Leo Exception
					case "NmlAtk5CFar_Guard": output = "S Guardpoint P"; break;
					case "NmlAtk5D_Guard": output = "H Guardpoint P"; break;
					//Raven Exception
					case "NmlAtk4AHasei": output = "Four P"; break;
				}
			}
		}

		//Answer
		if (character == "Answer" || character == "all" && output == state && foundException == 0)
		{
			if (mode == "Real Name" && mode == "TTS Friendly")
			{
				switch(state)
				{
					case "Ami_set_Land": output = "Seal of Approval"; break;
					case "Ami_set_Air": output = "Air Seal of Approval"; break;
					case "Ami_Move": output = "Safety Net"; break;
					case "Ami_Atemi": output = "Data Logging"; break;
					case "Ami_Stamp": output = "Down the Ladder"; break;
					case "Ami_Gedan": output = "Stepping Down"; break;
					case "Ami_Chudan": output = "Into My Office"; break;
					case "Meishi_Throw": output = "Caltrops"; break;
					case "Meishi_Warp": output = "Under the Rug"; break;
					case "Meishi_Nin_Jitsu": output = "Under the Bus"; break;
					case "Mozu_Land": output = "Tax Write-off"; break;
					case "Mozu_Air": output = "Air Tax Write-off"; break;
					case "Zaneiken": output = "Resshou"; break;
					case "Royal_Straight_Flush": output = "Dead Stock Ninpo: Firesale"; break;
					case "Human_Suriken": output = "Business Ultimate Ninpo: All Hands"; break;
				}
			}

			if (mode == "Numpad")
			{
				switch(state)
				{
					case "Ami_set_Land": output = "214X"; break;
					case "Ami_set_Air": output = "j214X"; break;
					case "Ami_Move": output = "Ninpo D"; break;
					case "Ami_Atemi": output = "22P/Ninpo P"; break;
					case "Ami_Stamp": output = "Ninpo K"; break;
					case "Ami_Gedan": output = "Ninpo S"; break;
					case "Ami_Chudan": output = "Ninpo H"; break;
					case "Meishi_Throw": output = "236S/H"; break;
					case "Meishi_Warp": output = "22S/H"; break;
					case "Meishi_Nin_Jitsu": output = "421S/H"; break;
					case "Mozu_Land": output = "623K"; break;
					case "Mozu_Air": output = "j623K"; break;
					case "Zaneiken": output = "46P"; break;
					case "Royal_Straight_Flush": output = "632146S/D"; break;
					case "Human_Suriken": output = "236236K"; break;
				}
			}
		} 
		//Axl
		if (character == "Axl" || character == "all" && state == output && foundException == 0)
		{
			if (mode == "TTS Friendly")
			{
				switch(state)
				{
					case "BentenGari": output = "Benten"; break;
					case "Raieisageki": output = "The Crossup"; break;
					case "Rashosen": output = "The Unblockable"; break;
					case "Rensengeki": output = "Rensen"; break;
					case "Kyokusageki": output = "Rensen 8"; break;
					case "Sensageki": output = "Rensen 2"; break;
					case "TenhousekiJou": output = "High Counter"; break;
					case "TenhousekiGe": output = "Low Counter"; break;
					case "AxelBomber": output = "Axl Bomber"; break;
					case "DaiRensen": output = "Sparrowhawk"; break;
					case "DaiRensenA": output = "Sparrowhawk P"; break;
					case "DaiRensenB": output = "Sparrowhawk K"; break;
					case "DaiRensenC": output = "Sparrowhawk S"; break;
					case "DaiRensenD": output = "Sparrowhawk Cancel"; break;
					case "ByakueRenshou": output = "Sickle Storm"; break;
					case "KairagiYakou": output = "Shark Strike"; break;		
				}
			}

			if (mode == "Real Name" && state == output && foundException == 0)
			{
				switch(state)
				{
					case "BentenGari": output = "Benten"; break;
					case "Raieisageki": output = "Thunder Shadow Chain"; break;
					case "Rashosen": output = "Spindle Spinner"; break;
					case "Rensengeki": output = "Rensen"; break;
					case "Kyokusageki": output = "Melody Chain"; break;
					case "Sensageki": output = "Spinning Chain Strike"; break;
					case "TenhousekiJou": output = "Heavy Can Wait (High)"; break;
					case "TenhousekiGe": output = "Heaven Can Wait (Low)"; break;
					case "AxelBomber": output = "Axl Bomber"; break;
					case "DaiRensen": output = "Sparrowhawk Stance"; break;
					case "DaiRensenA": output = "Sparrowhawk High"; break;
					case "DaiRensenB": output = "Sparrowhawk Mid"; break;
					case "DaiRensenC": output = "Sparrowhawk Low"; break;
					case "DaiRensenD": output = "Sparrowhawk Cancel"; break;
					case "ByakueRenshou": output = "Sickle Storm"; break;
					case "KairagiYakou": output = "Shark Strike"; break;		
				}
			}

			if (mode == "Numpad" && state == output && foundException == 0)
			{
				switch(state)
				{
					case "BentenGari": output = "623S"; break;
					case "Raieisageki": output = "623K"; break;
					case "Rashosen": output = "41236H"; break;
					case "Rensengeki": output = "[4]6"; break;
					case "Kyokusageki": output = "Rensen 8"; break;
					case "Sensageki": output = "Rensen 2"; break;
					case "TenhousekiJou": output = "214P"; break;
					case "TenhousekiGe": output = "214K"; break;
					case "AxelBomber": output = "j623H"; break;
					case "DaiRensen": output = "214H"; break;
					case "DaiRensenA": output = "Sparrowhawk P"; break;
					case "DaiRensenB": output = "Sparrowhawk K"; break;
					case "DaiRensenC": output = "Sparrowhawk S"; break;
					case "DaiRensenD": output = "Sparrowhawk H"; break;
					case "ByakueRenshou": output = "2363214H"; break;
					case "KairagiYakou": output = "214214S"; break;		
				}
			}
		}
		//Baiken
		if (character == "Baiken" || character == "all" && output == state && foundException == 0)
		{
			if (mode == "TTS Friendly" && state == output && foundException == 0)
			{
				switch(state)
				{
					case "TatamiLand": output = "Tatami"; break;
					case "TatamiAir": output = "Air Tatami"; break;
					case "YouZanSen": output = "Yojohnson"; break;
					case "Kabari": output = "H Kabari"; break;
					case "Tossin": output = "H Followup"; break;
					case "KabariAntiAir": output = "S Kabari"; break;
					case "Tetsuzansen": output = "S Followup"; break;
					//May require exception
					case "CommandThrow": output = "Chaos Dunk"; foundException = 1; break;
					case "BlockingStand": output = "High Azami"; break;
					case "BlockingCrouch": output = "Low Azami"; break;
					case "BlockingAir": output = "Air Azami"; break;
					case "Suzuran": output = "Suzuran"; break;
					case "Youshijin": output = "Kuchinashi"; break;
					case "Mawarikomi": output = "Mawari"; break;
					case "Sakura": output = "Sakura"; break;
					case "Issen": output = "Rokkon"; break;
					case "Teppou": output = "Yasha"; break;
					case "AirGCAntiAir": output = "Tsubaki"; break;
					case "AirGCAntiGround": output = "Kikyo"; break;
					case "TsuraneSanzuWatashi": output = "Tsurane"; break;
					case "BlockingKakusei": output = "Metsudo"; break;
				}
			}
			 
			if (mode == "Real Name" && state == output && foundException == 0)
			{
				switch(state)
				{
					case "TatamiLand": output = "Tatami Gaeshi"; break;
					case "TatamiAir": output = "Air Tatami Gaeshi"; break;
					case "YouZanSen": output = "Yozansen"; break;
					case "Kabari": output = "H Kabari"; break;
					case "Tossin": output = "Rokkon Sogi"; break;
					case "KabariAntiAir": output = "S Kabari"; break;
					case "Tetsuzansen": output = "Tetsuzan Sen"; break;
					//May require exception
					case "CommandThrow": output = "Chaos Dunk"; break;
					case "BlockingStand": output = "High Azami"; break;
					case "BlockingCrouch": output = "Low Azami"; break;
					case "BlockingAir": output = "Air Azami"; break;
					case "Suzuran": output = "Suzuran"; break;
					case "Youshijin": output = "Kuchinashi"; break;
					case "Mawarikomi": output = "Mawari-komi"; break;
					case "Sakura": output = "Sakura"; break;
					case "Issen": output = "Rokkon Sogi"; break;
					case "Teppou": output = "Yasha Gatana"; break;
					case "AirGCAntiAir": output = "Tsubaki"; break;
					case "AirGCAntiGround": output = "Kikyo"; break;
					case "TsuraneSanzuWatashi": output = "Tsurane Sanzu-watashi"; break;
					case "BlockingKakusei": output = "Metsudo Kushodo"; break;
				}
			}
			 
			if (mode == "Numpad" && state == output && foundException == 0)
			{
				switch(state)
				{
					case "TatamiLand": output = "236K"; break;
					case "TatamiAir": output = "j236K"; break;
					case "YouZanSen": output = "j623S"; break;
					case "Kabari": output = "41236H"; break;
					case "Tossin": output = "~H"; break;
					case "KabariAntiAir": output = "41236S"; break;
					case "Tetsuzansen": output = "~S"; break;
					//May require exception
					case "CommandThrow": output = "~P"; break;
					case "BlockingStand": output = "S+H"; break;
					case "BlockingCrouch": output = "2S+H"; break;
					case "BlockingAir": output = "jS+H"; break;
					case "Suzuran": output = "63214K"; break;
					case "Youshijin": output = "~P"; break;
					case "Mawarikomi": output = "~K"; break;
					case "Sakura": output = "~S"; break;
					case "Issen": output = "~H"; break;
					case "Teppou": output = "~D"; break;
					case "AirGCAntiAir": output = "~P/K"; break;
					case "AirGCAntiGround": output = "~S/H"; break;
					case "TsuraneSanzuWatashi": output = "236236S"; break;
					case "BlockingKakusei": output = "~236236H"; break;
				}
			}
		}
		//Bedman
		if (character == "Bedman" || character == "all" && output == state && foundException == 0)
		{
			if (mode == "TTS Friendly" && state == output && foundException == 0)
			{
				switch(state)
				{
					case "Boomerang_B": output = "K Task A"; break;
					case "Boomerang_B_Air": output = "Air K Task A"; break;
					case "Okkake": output = "What the hell I cannot believe Hemi Jack hit."; break;
				}
			}
			 
			if(mode == "Real Name" || mode == "TTS Friendly" && state == output && foundException == 0)
			{
				switch(state)
				{
					case "AirStop": output = "Hover"; break;
					case "6Move": output = "Airdash 6"; break;
					case "3Move": output = "Airdash 3"; break;
					case "2Move": output = "Airdash 2"; break;
					case "1Move": output = "Airdash 1"; break;
					case "4Move": output = "Airdash 4"; break;
					case "7Move": output = "Airdash 7"; break;
					case "8Move": output = "Airdash 8"; break;
					case "9Move": output = "Airdash 9"; break;
					case "WarpEffHead": output = "Jump Scare"; break;
					case "SpiralBed": output = "Task B"; break;
					case "SpiralBed_Air": output = "Air Task B"; break;
					case "Boomerang_A": output = "Task A"; break;
					case "Boomerang_B": output = "Task A'"; break;
					case "Boomerang_A_Air": output = "Air Task A"; break;
					case "Boomerang_B_Air": output = "Air Task A'"; break;
					case "Boomerang_A_Head": output = "Task A"; break;
					case "Boomerang_B_Head": output = "Task A'"; break;
					case "FlyingBed": output = "Task C"; break;
					case "FlyingBed_Air": output = "Air Task C"; break;
					case "DejavIconFlyingBed": output = "Task C Icon"; break;
					case "DejavIconBoomerangA": output = "Task A Icon"; break;
					case "DejavIconBoomerangB": output = "Task A' Icon"; break;
					case "Dejavu_A": output = "Dejavu P"; break;
					case "Dejavu_B": output = "Dejavu K"; break;
					case "Dejavu_C": output = "Dejavu S"; break;
					case "Djavu_C_Ghost": output = "Dejavu S Ghost"; break;
					case "Djavu_D_Ghost": output = "Dejavu H Ghost"; break;
					case "DreamCatcherSuka": output = "LOUD INCORRECT BUZZER"; break;
					case "Alarm": output = "Alarm"; break;
					case "Merry": output = "Hemi Jack"; break; 	
					case "MerryWarp": output = "Hemi Jack"; break;
					case "Okkake": output = "Hemi Jack"; break;
				}
			}
			 

			if(mode == "Numpad" && state == output && foundException == 0)
			{
				switch(state)
				{
					case "AirStop" : output = "j8"; break;
					case "6Move": output = "~6"; break;
					case "3Move": output = "~3"; break;
					case "2Move": output = "~2"; break;
					case "1Move": output = "~1"; break;
					case "4Move": output = "~4"; break;
					case "7Move": output = "~7"; break;
					case "8Move": output = "~8"; break;
					case "9Move": output = "~9"; break;
					case "SpiralBed": output = "236S"; break;
					case "SpiralBed_Air": output = "j236S"; break;
					case "Boomerang_A": output = "236P"; break;
					case "Boomerang_B": output = "236K"; break;
					case "Boomerang_A_Air": output = "j236P"; break;
					case "Boomerang_B_Air": output = "j236K'"; break;
					case "Boomerang_A_Head": output = "Task A (Hit)"; break;
					case "Boomerang_B_Head": output = "Task A' (Hit)"; break;
					case "FlyingBed": output = "236H"; break;
					case "FlyingBed_Air": output = "j236H"; break;
					case "Dejavu_A": output = "214P"; break;
					case "Dejavu_B": output = "214K"; break;
					case "Dejavu_C": output = "214S"; break;
					case "Dejavu_D" : output = "214H"; break;
					case "Djavu_C_Ghost": output = "Dejavu B (Hit)"; break;
					case "Djavu_D_Ghost": output = "Dejavu C (Hit)"; break;
					case "Alarm": output = "632146H"; break;
					case "Merry": output = "632146S"; break; 	
					case "Okkake": output = "632146S (Hit)"; break;
				}
			}
		}
		
		//Chipp
		if (character == "Chipp" || character == "all" && output == state && foundException == 0)
		{
			if (mode == "Real Name" || mode == "TTS Friendly" && state == output && foundException == 0)
			{
				switch(state)
				{
					case "WarpA": output = "P Teleport"; break;
					case "WarpB": output = "K Teleport"; break;
					case "WarpC": output = "S Teleport"; break;
					case "WarpD": output = "H Teleport"; break;
					case "AlphaBlade": output = "Alpha Blade"; break;
					case "AirAlphaBlade": output = "Air Alpha Blade"; break;
					case "AlphaPlus": output = "Alpha Blade Plus"; break;
					case "Tobiagari": output = "Shinkirou"; break;
					case "HiritsukiKeep": output = "Wall Cling"; break;
					case "BetaBlade": output = "Beta Blade"; break;
					case "AirBetaBlade": output = "Air Beta Blade"; break;
					case "GammaBlade": output = "Gamma Blade"; break;
					case "SankakuTobiDown": output = "Wall Dive"; break;
					case "Genrouzan": output = "Leaf Grab"; break;
					case "GenrouzanExe": output = "Leaf Grab"; break;
					case "Sushi": output = "Resshou"; break;
					case "Sukiyaki": output = "Rokusai"; break;
					case "Banzai": output = "Senshuu"; break;
					case "ZanseiRouga": output = "Zansei Rouga"; break;
					case "BankiMessai": output = "Banki Messai"; break;
					case "6WayKunai": output = "Ryuu Yanagi"; break;
					case "Kunai": output = "Ryuu Yanagi"; break;
					case "HaritsukiA": output = "Wall Alpha Blade"; break;
					case "HaritsukiB": output = "Wall Kunai"; break;
					case "Kunai_Wall_Mitame": output = "Wall Kunai"; break;				
					case "HaritsukiC": output = "Wall Leaf Grab"; break;
					case "HaritsukiD": output = "Wall Air Leaf Grab"; break;
					case "Genyouzan": output = "Wall Air Leaf Grab"; break;
					case "GenyouzanExe": output = "Wall Air Leaf Grab"; break;
					case "Shuriken": output = "Shuriken"; foundException = 1; break;
					case "ShurikenObj": output = "Slow Shuriken"; break;
					case "ShurikenObj1": output = "Fast Shuriken"; break;
					case "Meisai": output = "Meisai"; foundException = 1; break;
				}
			}
			 
			if (mode == "Numpad" && state == output && foundException == 0)
			{
				switch(state)
				{
					case "WarpA": output = "22P"; break;
					case "WarpB": output = "22K"; break;
					case "WarpC": output = "22S"; break;
					case "WarpD": output = "22H"; break;
					case "AlphaBlade": output = "236P"; break;
					case "AirAlphaBlade": output = "j236P"; break;
					case "AlphaPlus": output = "~H"; break;
					case "Tobiagari": output = "623H"; break;
					case "HiritsukiKeep": output = "Wall Cling"; break;
					case "BetaBlade": output = "623S"; break;
					case "AirBetaBlade": output = "j623S"; break;
					case "GammaBlade": output = "41236H"; break;
					case "SankakuTobiDown": output = "~2"; break;
					//Exception. Used for Wall Situation
					case "Genrouzan": output = "Leaf Grab"; break;
					case "GenrouzanExe": output = "Leaf Grab"; break;
					case "Sushi": output = "236S"; break;
					case "Sukiyaki": output = "~236S"; break;
					case "Banzai": output = "~236K"; break;
					case "ZanseiRouga": output = "632146H"; break;
					case "BankiMessai": output = "236236K"; break;
					case "6WayKunai": output = "j214214K"; break;
					case "Kunai": output = "j214214K (Hit)"; break;
					case "HaritsukiA": output = "Wall P"; break;
					case "HaritsukiB": output = "Wall K"; break;
					case "Kunai_Wall_Mitame": output = "Wall K"; break;				
					case "HaritsukiC": output = "Wall S"; break;
					case "HaritsukiD": output = "Wall H"; break;
					case "Genyouzan": output = "Leaf Grab (Air)"; break;
					case "GenyouzanExe": output = "Leaf Grab (Air)"; break;
					case "Shuriken": output = "j214P"; break;
					case "ShurikenObj": output = "j214P (Slow)"; break;
					case "ShurikenObj1": output = "j214P (Fast)"; break;
					case "Meisai": output = "214K"; foundException = 1; break;
				}
			}
		}
		
		//Dizzy
		if (character == "Dizzy" || character == "all" && output == state && foundException == 0)
		{
			if (mode == "Numpad")
			{
				if (state.includes("Hanashi"))
				{
					switch(state)
					{
						case "HanashiD": output = "214H"; break;
						case "HanashiObjD": output = "214H (Hit)"; break;
						case "HanashiE": output = "214D"; break;
						case "HanashiObjE": output = "214D (Hit)"; break;
						case "HanashiC": output = "214S"; break;
						case "HanashiObjC": output = "214S (Hit)"; break;
						case "HanashiA": output = "214P (Hit)"; break;
						case "HanashiObjA": output = "214P (Hit)"; break;
						case "HanashiB": output = "214K"; break;
						case "HanashiObjB": output = "214K (Hit)"; break;
						case "HanashiD_Air": output = "j214H"; break;
						case "HanashiC_Air": output = "j214S"; break;
						case "HanashiE_Air": output = "j214D"; break;
						case "HanashiA_Air": output = "j214P"; break;
						case "HanashiB_Air": output = "j214K"; break;
					}
				} 
				else
				{
					switch(state)
					{
						case "AwaP": output = "j236P"; break;
						case "AwaPObj": output = "j236P (Hit)"; break;
						case "AwaK": output = "j236K"; break;
						case "AwaKObj": output = "j236K"; break;
						case "Akari": output = "236K"; break;
						case "AkariUndine": output = "236P"; break;
						//Exception AkariObj used for Fire and Ice.
						case "AkariObj": output = "236P/K (Hit)"; break;
						case "Kinomi": output = "421S"; break;
						case "KinomiNecro": output = "421H"; break;
						case "KinomiObjNecrobomb": output = "421H (Hit)"; break;
						case "KinomiNecroObj": output = "421H (Hit)"; break;
						case "KinomiNecroObj1": output = "421H (Hit)"; break;
						case "KinomiNecroObj2": output = "421H (Hit)"; break;
						case "Sakana": output = "236S"; break;
						case "SakanaNecro": output = "236H"; break;
						//Exception. SakanaObj have the same object name.
						case "SakanaObj": output = "Pillar (Hit)"; break;
						case "Laser": output = "Laser (Hit)"; break;
						case "ImperialRay": output = "632146S"; break;
						case "GammaRay": output = "64641236H"; break;
						case "GammaRayLaser": output = "64641236H (Hit)"; break;
						case "GammaRayLaserMax": output = "64641236H (Hit)"; break;
						case "ImperialRayBakuhatsu": output = "632146S (Hit)"; break;
						case "ImpBombEff": output = "632146S (Hit)"; break;
						case "KirikaeshiKakusei": output = "632146P"; break;
					}
				}
			}
			 
			if (mode == "Real Name" || mode == "TTS Friendly" && state == output && foundException == 0)
			{
				if (state.includes("Hanashi"))
				{
					switch(state)
					{
						case "HanashiD": output = "H Fish"; break;
						case "HanashiObjD": output = "H Fish"; break;
						case "HanashiE": output = "D Fish"; break;
						case "HanashiObjE": output = "D Fish"; break;
						case "HanashiC": output = "S Fish"; break;
						case "HanashiObjC": output = "S Fish"; break;
						case "HanashiA": output = "P Fish"; break;
						case "HanashiObjA": output = "P Fish"; break;
						case "HanashiB": output = "K Fish"; break;
						case "HanashiObjB": output = "K Fish"; break;
						case "HanashiD_Air": output = "Air H Fish"; break;
						case "HanashiC_Air": output = "Air S Fish"; break;
						case "HanashiE_Air": output = "D Fish"; break;
						case "HanashiA_Air": output = "Air P Fish"; break;
						case "HanashiB_Air": output = "Air K Fish"; break;
					}
				} 
				else
				{
					switch(state)
					{
						case "AwaP": output = "Water Bubble"; break;
						case "AwaPObj": output = "Water Bubble"; break;
						case "AwaK": output = "Fire Bubble"; break;
						case "AwaKObj": output = "Fire Bubble"; break;
						case "Akari": output = "Fire Scythe"; break;
						case "AkariNecro": output = "Fire Scythe"; break;
						case "AkariUndine": output = "Ice Scythe"; break;
						//Exception AkariObj used for Fire and Ice.
						case "AkariObj": output = "Scythe"; break;
						case "Kinomi": output = "Ice Spear"; break;
						case "KinomiNecro": output = "Fire Spear"; break;
						case "KinomiObjNecrobomb": output = "Fire Spear"; break;
						case "KinomiNecroObj": output = "Fire Spear"; break;
						case "KinomiNecroObj1": output = "Fire Spear"; break;
						case "KinomiNecroObj2": output = "Fire Spear"; break;
						case "Sakana": output = "Ice Pillar"; break;
						case "SakanaNecro": output = "Fire Pillar"; break;
						//Exception. SakanaObj have the same object name.
						case "SakanaObj": output = "Pillar"; break;
						case "Laser": output = "Laser"; break;
						case "ImperialRay": output = "Imperial Ray"; break;
						case "GammaRay": output = "Gamma Ray"; break;
						case "GammaRayLaser": output = "Gamma Ray"; break;
						case "GammaRayLaserMax": output = "Gamma Ray"; break;
						case "ImperialRayBakuhatsu": output = "Imperial Ray"; break;
						case "ImpBombEff": output = "Imperial Ray"; break;
						case "KirikaeshiKakusei": output = "Mirror"; break;
					}
				}
			}
		}
		
		//Elphelt
		if (character == "Elphelt" || character == "all" && output == state && foundException == 0)
		{
			variable = 0;
			
			if (mode == "TTS Friendly")
			{
				switch(state)
				{
					case "Grenade_Air_Throw": output = "Air Pineberry"; break;
					case "Shotgun_Rolling2": output = "Roll"; break;
					case "BridalExpress_Land": output = "Bridal Express"; break;
					case "BridalExpress_Air": output = "Air Bridal Express"; break;
					case "Shotgun_Fire_MAX": output = "Charged Shotgun"; break;
				}
			}
			 
			if(mode == "Real Name" || mode == "TTS Friendly" && state == output && foundException == 0)
			{
				switch(state)
				{
					case "Grenade_Land_Standby": output = "Pineberry Pull"; break;
					case "Grenade_Land_Throw_Down": output = "Low Pineberry Toss"; break;
					case "Grenade_Air_Throw": output = "Air Pineberry Toss"; break;
					case "Grenade_Land_Throw_Upper": output = "High Pineberry Toss"; break;
					case "GrenadeBomb_Explode": output = "Pineberry Explosion"; break;
					case "GrenadeBomb": output = "Pineberry"; break;
					case "Rifle_Start": output = "Sniper Stance"; break;
					case "Rifle_End": output = "Sniper Stance"; break;
					case "Rifle_Fire": output = "Sniper Shot"; break;
					case "Rifle_Fire_MAX": output = "Charged Sniper Shot"; break;
					case "Rifle_Fire_MIN": output = "Sniper Shot"; break;
					case "Rifle_Reload": output = "Sniper Reload"; break;
					case "Shotgun_Rolling2": output = "Roll and Aim"; break;
					case "Shotgun_Rolling": output = "Shotgun K"; break;
					case "Shotgun_Koduki": output = "Shotgun P"; break;
					case "Shotgun_Upper": output = "Shotgun S"; break;
					case "Shotgun_Fire_MAX": output = "Charged Shotgun H"; break;
					case "Shotgun_Fire_MIN": output = "Shotgun H"; break;
					case "Shotgun_CQC": output = "Shotgun D"; break;
					case "Shotgun_CQCExe": output = "Shotgun D"; break;
					case "Shotgun_End": output = "Shotgun Cancel"; break;
					case "Shotgun_Reload": output = "Shotgun Reload"; break;
					case "BridalExpress_Land": output = "Bridal Express"; break;
					case "BridalExpress_Air": output = "Air Bridal Express"; break;
					case "Judge_BetterHalf": output = "Judge Better Half"; break;
					case "Bazooka": output = "Bazooka"; break;
				}
			}
			 
			if(mode == "Numpad" && state == output && foundException == 0)
			{
				switch(state)
				{
					case "Grenade_Land_Standby": output = "236P"; break;
					case "Grenade_Land_Throw_Down": output = "Pineberry 2P"; break;
					case "Grenade_Air_Throw": output = "Pineberry jP"; break;
					case "Grenade_Land_Throw_Upper": output = "Pineberry 4P"; break;
					case "GrenadeBomb_Explode": output = "Pineberry (Hit)"; break;
					case "GrenadeBomb": output = "Pineberry (Hit)"; break;
					case "Rifle_Start": output = "236S"; break;
					case "Rifle_Fire": output = "Sniper H"; break;
					case "Rifle_Fire_MAX": output = "Max Sniper H"; break;
					case "Rifle_Fire_MIN": output = "Sniper H"; break;
					case "Rifle_Reload": output = "46S"; break;
					case "Shotgun_Rolling2": output = "236K"; break;
					case "Shotgun_Rolling": output = "Shotgun K"; break;
					case "Shotgun_Koduki": output = "Shotgun P"; break;
					case "Shotgun_Upper": output = "Shotgun S"; break;
					case "Shotgun_Fire_MAX": output = "Max Shotgun H"; break;
					case "Shotgun_Fire_MIN": output = "Shotgun H"; break;
					case "Shotgun_CQC": output = "Shotgun D"; break;
					case "Shotgun_CQCExe": output = "Shotgun D"; break;
					case "Shotgun_End": output = "Shotgun 236H"; break;
					case "Shotgun_Reload": output = "Shotgun 46H"; break;
					case "BridalExpress_Land": output = "214K"; break;
					case "BridalExpress_Air": output = "j214K"; break;
					case "Judge_BetterHalf": output = "236236K"; break;
					case "Bazooka": output = "632146H"; break;
					case "Bazooka_Explosive": output = "632146H (Hit)"; break;
				}
				
			}
		}
		
		//Faust
		if (character == "Faust" || character == "all" && output == state && foundException == 0)
		{
			if (mode == "Numpad")
			{
				if (state.includes("Item"))
				{
					switch (state)
					{
						case "Item_Hammer": output = "Hammer"; break;
						case "Item_Oilcan": output = "Oil"; break;
						case "Item_BlackHole": output = "Black Hole"; break;
						case "Item_Bomb": output = "Bomb"; break;
						case "Item_Helium": output = "Helium Gas"; break;
						case "Item_Meteo": output = "Meteors"; break;
						case "Item_ChibiFaust": output = "Mini-Faust"; break;
						case "Item_Frasco": output = "Poison"; break;
						case "SubItem_Poison": output = "Poison"; break;
						case "Item_Chocolate": output = "Chocolate"; break;
						case "Item_Donut": output = "Doughnut"; break;
						case "Jumpdai_Loop": output = "Jump Pad"; break;
						case "Jumpdai_Hatudo": output = "Jump Pad"; break;
						case "Item_100t": output = "100 Ton Weight"; break;
						case "Item_FireWorks": output = "Fireworks"; break;
						case "Item_Armageddon": output = "Big Meteor"; break;
						case "Item_GoldenHammer": output = "Golden Hammer"; break;
						case "Item_BigFaust": output = "Big Mini-Faust"; break;
						case "Item_BestChocolate": output = "Valentine's Chocolate"; break;
						case "Item_ManyDonuts": output = "Box of Donuts"; break;
						case "Item_Golden100t": output = "10,000 Ton Weight"; break;
					}
				}
				else if (state.includes("Souten"))
				{
					switch(state)
					{
						case "Souten": output = "236S"; break;
						case "SoutenD": output = "Pogo H"; break;
						case "Souten66": output = "Pogo 66"; break;
						case "Souten44": output = "Pogo 44"; break;
						case "Souten9": output = "Pogo 9"; break;
						case "SoutenA": output = "Pogo P"; break;
						case "SoutenB": output = "Pogo K"; break;
						case "SoutenC": output = "Pogo S"; break;
						case "SoutenE": output = "Pogo D"; break;
						case "Souten8": output = "Pogo 8"; break;	
					}
				} 
				else
				{
					switch(state)
					{
						case "AirGoingMyWay": output = "j236H"; break;
						case "Mettagiri": output = "214H"; break;
						case "CrouchFWalk": output = "Crawl"; break;	
						case "Ai": output = "j236P"; break;
						case "UshirokaraIkimasuyo": output = "214K"; break;
						case "MaekaraIkimasuyo": output = "214P"; break;
						case "UekaraIkimasuyo": output = "214S"; break;
						case "NanigaDerukana": output = "236P"; break;
						case "NaNaNaNanigaDerukana": output = "236236P"; break;
						case "SugoiNaNaNaNanigaDerukana": output = "236236236P"; break;
						case "MeteoInseki": output = "Meteors"; break;
						case "Shigeki": output = "236236S"; break;
					}
				}
			}

			if (mode == "TTS Friendly" && state == output && foundException == 0)
			{
				switch (state)
				{
					case "Item_100t": output = "One Hundred Ton Weight"; break;
					case "Item_Golden100t": output = "Ten Thousand Ton Weight"; break;
					case "Souten66": output = "Pogo 6 6"; break;
					case "Souten44": output = "Pogo 4 4"; break;
					case "SugoiNaNaNaNanigaDerukana": output = "Hundred Meter Item Super"; break;
				}
			}
			 
			if (mode == "Real Name" || mode == "TTS Friendly" && state == output && foundException == 0)
			{
				if (state.includes("Item"))
				{
					switch (state)
					{
						case "Item_Hammer": output = "Hammer"; break;
						case "Item_Oilcan": output = "Oil"; break;
						case "Item_BlackHole": output = "Black Hole"; break;
						case "Item_Bomb": output = "Bomb"; break;
						case "Item_Helium": output = "Helium Gas"; break;
						case "Item_Meteo": output = "Meteors"; break;
						case "Item_ChibiFaust": output = "Mini-Faust"; break;
						case "Item_Frasco": output = "Poison"; break;
						case "SubItem_Poison": output = "Poison"; break;
						case "Item_Chocolate": output = "Chocolate"; break;
						case "Item_Donut": output = "Doughnut"; break;
						case "Jumpdai_Loop": output = "Jump Pad"; break;
						case "Jumpdai_Hatudo": output = "Jump Pad"; break;
						case "Item_100t": output = "100 Ton Weight"; break;
						case "Item_FireWorks": output = "Fireworks"; break;
						case "Item_Armageddon": output = "Big Meteor"; break;
						case "Item_GoldenHammer": output = "Golden Hammer"; break;
						case "Item_BigFaust": output = "Big Mini-Faust"; break;
						case "Item_BestChocolate": output = "Valentine's Chocolate"; break;
						case "Item_ManyDonuts": output = "Box of Donuts"; break;
						case "Item_Golden100t": output = "10,000 Ton Weight"; break;
					}
				}
				else if (state.includes("Souten"))
				{
					switch(state)
					{
						case "Souten": output = "Pogo"; break;
						case "SoutenD": output = "Going My Way"; break;
						case "Souten66": output = "Pogo 66"; break;
						case "Souten44": output = "Pogo 44"; break;
						case "Souten9": output = "Pogo Hop"; break;
						case "SoutenA": output = "Pogo P"; break;
						case "SoutenB": output = "K Flower"; break;
						case "SoutenC": output = "S Flower"; break;
						case "SoutenE": output = "Pogo Item"; break;
						case "Souten8": output = "Doctor Copter"; break;	
					}
				} 
				else
				{
					switch(state)
					{
						case "AirGoingMyWay": output = "Air Going My Way"; break;
						case "Mettagiri": output = "Hack n' Slash"; break;
						case "CrouchBWalk": output = "Low Block"; break;
						case "CrouchFWalk": output = "Crawl"; break;	
						case "Ai": output = "Love"; break;
						case "UshirokaraIkimasuyo": output = "K Door"; break;
						case "MaekaraIkimasuyo": output = "P Door"; break;
						case "UekaraIkimasuyo": output = "S Door"; break;
						case "NanigaDerukana": output = "Item Toss"; break;
						case "NaNaNaNanigaDerukana": output = "Super Item Toss"; break;
						case "SugoiNaNaNaNanigaDerukana": output = "100 Meter Item Super"; break;
						case "MeteoInseki": output = "Meteors"; break;
						case "Shigeki": output = "Stimulating Fists of Annihilation"; break;
					}
				}
			}				
		}
		
		//Ino
		if (character == "Ino" || character == "all" && output == state && foundException == 0)
		{
			if(mode == "Numpad")
			{
				switch(state)
				{
					case "TaibokuC": output = "41236S"; break;
					case "TaibokuD": output = "41236H"; break;
					case "KouutsuOnkai": output = "214P"; break;
					case "Onpu": output = "214P (Hit)"; break;
					case "ChemicalB": output = "214K"; break;
					case "ChemicalAirB": output = "j214K"; break;
					case "BChemiLaser": output = "214K (Hit)"; break;
					case "ChemicalC": output = "214S"; break;
					case "ChemicalAdd": output = "~214S"; break;
					case "AddChemiLaser": output = "~214S"; break;
					case "ChemicalAirC": output = "j214S"; break;
					case "KyougenA": output = "j236P"; break;
					case "KyougenB": output = "j236K"; break;
					case "KyougenC": output = "j236S"; break;
					case "KyougenD": output = "j236H"; break;
					//Exception For Command Throw required
					case "CommandThrow": output = "214H"; break;
					case "CommandThrowExe": output = "214H"; break;
					case "Madogiwa": output = "632146H"; break;
					case "MadogiwaObj": output = "632146H (Hit)"; break;
					case "Genkai": output = "j2363214S"; break;
					case "GenkaiObj": output = "j2363214S (Hit)"; break;
				}
			}
			 
			if(mode == "TTS Friendly" && state == output && foundException == 0)
			{
				switch(state)
				{
					case "ChemicalB": output = "H C L"; break;
					case "ChemicalAirB": output = "Air H C L"; break;
					case "BChemiLaser": output = "H C L"; break;
					case "ChemicalC": output = "V C L"; break;
				}
			}
			 
			if(mode == "Real Name" || mode == "TTS Friendly" && state == output && foundException == 0)
			{
				switch(state)
				{
					case "TaibokuC": output = "S Stroke"; break;
					case "TaibokuD": output = "H Stroke"; break;
					case "KouutsuOnkai": output = "Note"; break;
					case "Onpu": output = "Note"; break;
					case "ChemicalB": output = "HCL"; break;
					case "ChemicalAirB": output = "Air HCL"; break;
					case "BChemiLaser": output = "HCL"; break;
					case "ChemicalC": output = "VCL"; break;
					case "ChemicalAdd": output = "Chemical Love Followup"; break;
					case "AddChemiLaser": output = "Chemical Love Followup"; break;
					case "ChemicalAirC": output = "Air VCL"; break;
					case "KyougenA": output = "P Dive"; break;
					case "KyougenB": output = "K Dive"; break;
					case "KyougenC": output = "S Dive"; break;
					case "KyougenD": output = "H Dive"; break;
					//Exception For Command Throw required
					case "CommandThrow": output = "Sterilization Method"; break;
					case "CommandThrowExe": output = "Sterilization Method"; break;
					case "Madogiwa": output = "Longing Desperation"; break;
					case "MadogiwaObj": output = "Longing Desperation"; break;
					case "Genkai": output = "Ultimate Fortissimo"; break;
					case "GenkaiObj": output = "Ultimate Fortissimo"; break;
				}
			}
		}
		//JackO
		if (character == "JackO" || character == "all" && output == state && foundException == 0)
		{
			if (mode == "Numpad")
			{
				switch(state)
				{
					case "Zest": output = "2D"; break;
					case "AirZest": output = "j2D"; break;
					case "UntieKiron'sChain": output = "jD"; break;
					case "CommandThorw": output = "6D"; break;
					case "CommandThorwEx": output = "6D"; break;
					case "IronballGenocide": output = "4D"; break;
					case "IronballGenocideEx": output = "4D"; break;
					//Exception Needed
					case "Calvados": output = "214S"; foundException = 1; break;
					case "Calvados_exprode": output = "214S (Hit)"; break;
					case "CalvadosObj": output = "214S (Hit)"; break;
					case "ScrewPileDriver": output = "6248P"; break;
					case "ScrewPileDriverEx": output = "6248P"; break;
					case "SummonGhostA": output = "22P"; break;
					case "SummonGhostB": output = "22K"; break;
					case "SummonGhostC": output = "22S"; break;
					case "OrganOpen": output = "22H"; break;
					case "GhostA": output = "House Toss"; break;
					case "GhostB": output = "House Toss"; break;
					case "GhostC": output = "House Toss"; break;
					case "ServantA": output = "P Servant"; break;
					case "ServentB": output = "K Servant"; break;
					case "ServantC": output = "S Servant"; break;
					case "Aigisfield": output = "Organ H"; break;
					case "Suicidal_explosion": output  = "Suicide Explosion"; break;
					case "Suicidal_explosion1": output  = "Suicide Explosion"; break;
					case "Suicidal_explosion2": output = "Suicide Explosion"; break;
					case "Suicidal_explosion3": output = "Suicide Explosion"; break;
				}
			}					
			 
			if (mode == "TTS Friendly" && state == output && foundException == 0)
			{
				switch(state)
				{
					case "UntieKiron'sChain": output = "jump D"; break;
					case "OrganOpen": output = "Organ"; break;
					case "IronballGenocide": output = "Four D"; break;
					case "IronballGenocideEx": output = "Four D"; break;
					//Might be weird
					case "SummonGhostA": output = "P House"; break;
					case "SummonGhostB": output = "K House"; break;
					case "SummonGhostC": output = "S House"; break;
					case "GhostA": output = "House Toss"; break;
					case "GhostB": output = "House Toss"; break;
					case "GhostC": output = "House Toss"; break;
				}
			}
			 
			if(mode == "Real Name" || mode == "TTS Friendly" && state == output && foundException == 0)
			{
				switch(state)
				{
					case "Zest": output = "Zest"; break;
					case "AirZest": output = "Air Zest"; break;
					case "UntieKiron'sChain": output = "Remove the Chain"; break;
					case "CommandThorw": output = "Elysion Driver"; break;
					case "CommandThorwEx": output = "Elysion Driver"; break;
					case "IronballGenocide": output = "Hunger of Dopros"; break;
					case "IronballGenocideEx": output = "Hunger of Dopros"; break;
					//Exception Needed
					case "Calvados": output = "Calvados"; foundException = 1; break;
					case "Calvados_exprode": output = "Calvados"; break;
					case "CalvadosObj": output = "Calvados"; break;
					case "ScrewPileDriver": output = "Forever Elysion Driver"; break;
					case "ScrewPileDriverEx": output = "Forever Elysion Driver"; break;
					case "SummonGhostA": output = "Set P House"; break;
					case "SummonGhostB": output = "Set K House"; break;
					case "SummonGhostC": output = "Set S House"; break;
					case "OrganOpen": output = "Organ Deployment"; break;
					case "GhostA": output = "P House"; break;
					case "GhostB": output = "K House"; break;
					case "GhostC": output = "S House"; break;
					case "ServantA": output = "P Servant"; break;
					case "ServentB": output = "K Servant"; break;
					case "ServantC": output = "S Servant"; break;
					case "Aigisfield": output = "Aegis Field"; break;
					case "Suicidal_explosion": output  = "Suicide Explosion"; break;
					case "Suicidal_explosion1": output  = "Suicide Explosion"; break;
					case "Suicidal_explosion2": output = "Suicide Explosion"; break;
					case "Suicidal_explosion3": output = "Suicide Explosion"; break;
				}
			}
		}
		
		//Jam		
		if (character == "Jam" || character == "all" && output == state && foundException == 0)
		{
			if (mode == "Numpad")
			{
				if(state.includes("Kenroukaku"))
				{
					switch(state)
					{
						case "KenroukakuLand": output = "623K"; break;
						case "KenroukakuKyoukaLand": output = "Carded 623K"; break;
						case "KenroukakuAir": output = "j623K"; break;
						case "KenroukakuKyoukaAir": output = "Card j623K"; break;
						case "Kenroukaku_zanzou1_sp": output = "Max 623K"; break;
						case "Kenroukaku_zanzou2_sp": output = "Max 623K"; break;
						case "Kenroukaku_zanzou3_sp": output = "Max 623K"; break;
						case "Kenroukaku_zanzou4_sp": output = "Max 623K"; break;
						case "Kenroukaku_zanzou1_normal": output = "623K"; break;
						case "Kenroukaku_zanzou2_normal": output = "623K"; break;
						case "Kenroukaku_zanzou3_normal": output = "623K"; break;
						case "Kenroukaku_zanzou4_normal": output = "623K"; break;
						case "Kenroukaku_zanzou1": output = "Card 623K"; break;
						case "Kenroukaku_zanzou2": output = "Card 623K"; break;
						case "Kenroukaku_zanzou3": output = "Card 623K"; break;
						case "Kenroukaku_zanzou4": output = "Card 623K"; break;
						case "Kenroukaku_sp1": output = "Card 623K"; break;
						case "Kenroukaku_sp2": output = "Max 623"; break;
					}
				} 
				else
				{
					switch(state)
					{
						
						//Exception required if you want to call it Bakushuu
						case "Youeikyaku": output = "j2K"; break;
						case "Bakushuu": output = "236S"; foundException = 1;  break;
						case "Mawarikomi": output = "~P"; break;
						case "RyujinLand": output = "236K"; break;
						case "RyujinAir": output = "j236K"; break;
						case "RyujinKyoukaLand": output = "Card 236K"; break;
						case "RyujinKyoukaAir": output = "Card j236K"; break;
						case "Ryujin_sp1": output = "Card 236K"; break;
						case "Ryujin_sp2": output = "Max 236K"; break;
						case "GekirinLand": output = "214K"; break;
						case "GekirinAir": output = "j214K"; break;
						case "GekirinKyoukaAir": output = "Card j214K"; break;
						case "Gekirin_sp1": output = "Card 214K"; break;
						case "Gekirin_sp2": output = "Max 214K"; break;	
						case "HyappoShinshou": output = "~S"; break;
						case "SenriShinshou": output = "~H"; break;
						case "Ashibarai": output = "~K"; break;
						case "NeoHochihu": output = "46"; break;
						case "TuikaA": output = "~P"; break;
						case "TuikaAA": output = "~P"; break;
						case "TuikaAB": output = "~K"; break;
						case "AsanagiB": output = "22K"; break;
						case "AsanagiC": output = "22S"; break;
						case "AsanagiD": output = "22H"; break;
						case "Asanagi_long": output = "22[X]"; break;
						case "Hououshou": output = "62146KS"; break;
						//Exception required
						case "Renhoukyaku": output = "632146H";  foundException = 1; break;
						case "RenhoukyakuObj": output = "632146H (Hit)"; break;
						case "Saishingeki": output = "236236H";  foundException = 1; break;
						case "Saisinsyou_tossin": output = "236236H (lol)"; break;
						
					}
				}
			}
			 
			if (mode == "TTS Friendly" && state == output && foundException == 0)
			{
				switch(state)
				{
					
					case "RyujinLand": output = "Dragon Kick"; break;
					case "RyujinAir": output = "Air Dragon Kick"; break;
					case "RyujinKyoukaLand": output = "Carded Dragon Kick"; break;
					case "RyujinKyoukaAir": output = "Air Carded Dragon Kick"; break;
					case "Ryujin_sp1": output = "Carded Dragon Kick"; break;
					case "Ryujin_sp2": output = "Max Dragon Kick"; break;
					case "Hououshou": output = "Hoh oh shou"; break;
					//Exception required
					case "Renhoukyaku": output = "Big Puffball";  foundException = 1; break;
					case "RenhoukyakuObj": output = "Big Puffball"; break;
					case "Saishingeki": output = "Saishingeki";  foundException = 1; break;
					case "Saisinsyou_tossin": output = "Sashingeki Whiff"; break;	
				}
			}
			 
			if (mode == "Real Name" || mode == "TTS Friendly" && state == output && foundException == 0)
			{
				if(state.includes("Kenroukaku"))
				{
					switch(state)
					{
						
						case "KenroukakuLand": output = "Kenroukaku"; break;
						case "KenroukakuKyoukaLand": output = "Carded Kenroukaku"; break;
						case "KenroukakuAir": output = "Air Kenroukaku"; break;
						case "KenroukakuKyoukaAir": output = "Carded Air Kenroukaku"; break;
						case "Kenroukaku_zanzou1_sp": output = "Max Kenroukaku"; break;
						case "Kenroukaku_zanzou2_sp": output = "Max Kenroukaku"; break;
						case "Kenroukaku_zanzou3_sp": output = "Max Kenroukaku"; break;
						case "Kenroukaku_zanzou4_sp": output = "Max Kenroukaku"; break;
						case "Kenroukaku_zanzou1_normal": output = "Kenroukaku"; break;
						case "Kenroukaku_zanzou2_normal": output = "Kenroukaku"; break;
						case "Kenroukaku_zanzou3_normal": output = "Kenroukaku"; break;
						case "Kenroukaku_zanzou4_normal": output = "Kenroukaku"; break;
						case "Kenroukaku_zanzou1": output = "Carded Kenroukaku"; break;
						case "Kenroukaku_zanzou2": output = "Carded Kenroukaku"; break;
						case "Kenroukaku_zanzou3": output = "Carded Kenroukaku"; break;
						case "Kenroukaku_zanzou4": output = "Carded Kenroukaku"; break;
						case "Kenroukaku_sp1": output = "Carded Kenroukaku"; break;
						case "Kenroukaku_sp2": output = "Max Kenroukaku"; break;
						
					}
				} 
				else
				{
					switch(state)
					{
						
						//Exception required if you want to call it Bakushuu
						case "Youeikyaku": output = "Divekick"; break;
						case "Bakushuu": output = "Bakushuu"; foundException = 1;  break;
						case "Mawarikomi": output = "Mawari"; break;
						case "RyujinLand": output = "Ryuujin"; break;
						case "RyujinAir": output = "Air Ryuujin"; break;
						case "RyujinKyoukaLand": output = "Carded Ryuujin"; break;
						case "RyujinKyoukaAir": output = "Air Carded Ryuujin"; break;
						case "Ryujin_sp1": output = "Carded Ryuujin"; break;
						case "Ryujin_sp2": output = "Max Ryuujin"; break;
						case "GekirinLand": output = "Gekirin"; break;
						case "GekirinAir": output = "Air Gekirin"; break;
						case "GekirinKyoukaAir": output = "Carded Air Gekirin"; break;
						case "Gekirin_sp1": output = "Carded Gekirin"; break;
						case "Gekirin_sp2": output = "Max Gekirin"; break;	
						case "HyappoShinshou": output = "S Puffball"; break;
						case "SenriShinshou": output = "H Puffball"; break;
						case "Ashibarai": output = "Hamon"; break;
						case "NeoHochihu": output = "Parry"; break;
						case "TuikaA": output = "Zekkei"; break;
						case "TuikaAA": output = "Goushao"; break;
						case "TuikaAB": output = "Dowanga"; break;
						case "AsanagiB": output = "K Card"; break;
						case "AsanagiC": output = "S Card"; break;
						case "AsanagiD": output = "H Card"; break;
						case "Asanagi_long": output = "Full Charge Card"; break;
						case "Hououshou": output = "Hou'oushou"; break;
						//Exception required
						case "Renhoukyaku": output = "Big Puffball";  foundException = 1; break;
						case "RenhoukyakuObj": output = "Big Puffball"; break;
						case "Saishingeki": output = "Saishingeki";  foundException = 1; break;
						case "Saisinsyou_tossin": output = "Sashingeki Whiff"; break;
						
					}
				}
			}
		}
		
		//Johnny
		if (character == "Johnny" || character == "all" && output == state && foundException == 0)
		{
			if(mode == "Numpad")
			{
				if (state.includes("MistFiner"))
				{
					switch(state)
					{
						case "MistFinerFDash": output = "~66"; break;
						case "MistFinerBDash": output = "~44"; break;	
						case "MistFinerLoop": output = "214P/K/S"; break;
						case "AirMistFinerLoop": output = "j214P/K/S"; break;
						case "MistFinerALv0": output = "!P"; break;
						case "MistFinerALv1": output = "!P"; break;
						case "MistFinerALv2": output = "!P"; break;
						case "MistFinerBLv0": output = "!K"; break;
						case "MistFinerBLv1": output = "!K"; break;
						case "MistFinerBLv2": output = "!K"; break;
						case "MistFinerCLv0": output = "!S"; break;
						case "MistFinerCLv1": output = "!S"; break;
						case "MistFinerCLv2": output = "!S"; break;
						case "AirMistFinerALv0": output = "!P"; break;
						case "AirMistFinerALv1": output = "!P"; break;
						case "AirMistFinerALv2": output = "!P"; break;
						case "AirMistFinerBLv0": output = "!K"; break;
						case "AirMistFinerBLv1": output = "!K"; break;
						case "AirMistFinerBLv2": output = "!K"; break;
						case "AirMistFinerCLv0": output = "!S"; break;
						case "AirMistFinerCLv1": output = "!S"; break;
						case "AirMistFinerCLv2": output = "!S"; break;
						case "MistFinerCancel": output = "~H"; break;
						case "AirMistFinerCancel": output = "~H"; break;
						case "MistFinerDehajime": output = "214P/K/S"; break;
						case "AirMistFinerDehajime": output = "j214P/K/S"; break;
					}
				}
				else
				{
					switch(state)
					{
						case "Sinwaza": output = "623K"; break;
						case "Sinwaza_Shot": output = "~K"; break;
						case "Sinwaza_Air": output = "j623K"; break;
						case "GlitterIsGold": output = "236P"; break;
						case "Coin": output = "236P (Hit)"; break;
						case "BucchusSigh": output = "41236P"; break;
						case "MisEffParts": output = "41236P"; break;
						case "MistKuttsuku": output = "41236P"; break;
						case "Orenona": output = "2363214H"; break;
						case "OrenonaExe": output = "2363214H"; break;
						case "TreasureHunt": output = "632146S"; break;
						case "StepTreasureHunt": output = "Step 632146S"; break;
					}
				}
			}
		}
		 
		
		if(mode == "Real Name" || mode == "TTS Friendly" && state == output && foundException == 0)
		{
			if (state.includes("MistFiner"))
			{
				switch(state)
				{
					case "MistFinerFDash": output = "Mist Finer Step"; break;
					case "MistFinerBDash": output = "Mist Finer Backstep"; break;	
					case "MistFinerLoop": output = "Mist Finer"; break;
					case "AirMistFinerLoop": output = "Mist Finer"; break;
					case "MistFinerALv0": output = "P Mist Finer"; break;
					case "MistFinerALv1": output = "Level 2 P Finer"; break;
					case "MistFinerALv2": output = "Level 3 P Finer"; break;
					case "MistFinerBLv0": output = "K Mist Finer"; break;
					case "MistFinerBLv1": output = "Level 2 K Finer"; break;
					case "MistFinerBLv2": output = "Level 3 K Finer"; break;
					case "MistFinerCLv0": output = "S Mist Finer"; break;
					case "MistFinerCLv1": output = "Level 2 S Finer"; break;
					case "MistFinerCLv2": output = "Level 3 S Finer"; break;
					case "AirMistFinerALv0": output = "Air P Mist Finer"; break;
					case "AirMistFinerALv1": output = "Air Level 2 P Finer"; break;
					case "AirMistFinerALv2": output = "Air Level 3 P Finer"; break;
					case "AirMistFinerBLv0": output = "Air K Mist Finer"; break;
					case "AirMistFinerBLv1": output = "Air Level 2 K Finer"; break;
					case "AirMistFinerBLv2": output = "Air Level 3 K Finer"; break;
					case "AirMistFinerCLv0": output = "Air S Mist Finer"; break;
					case "AirMistFinerCLv1": output = "Air Level 2 S Finer"; break;
					case "AirMistFinerCLv2": output = "Air Level 3 S Finer"; break;
					case "MistFinerCancel": output = "Mist Finer Cancel"; break;
					case "AirMistFinerCancel": output = "Air Mist Finer Cancel"; break;
					case "MistFinerDehajime": output = "Mist Finer"; break;
					case "AirMistFinerDehajime": output = "Mist Finer"; break;
				}
			}
			else
			{
				switch(state)
				{
					case "Sinwaza": output = "Transport"; break;
					case "Sinwaza_Shot": output = "Zweihander"; break;
					case "Sinwaza_Air": output = "Zweihander"; break;
					case "GlitterIsGold": output = "Coin"; break;
					case "Coin": output = "Coin";  foundException = 1; break;
					case "BucchusSigh": output = "Bacchus Sigh"; break;
					case "MisEffParts": output = "Bacchus Sigh Mist"; break;
					case "MistKuttsuku": output = "Bacchus Sigh Connected"; break;
					case "Orenona": output = "That's My Name"; break;
					case "OrenonaExe": output = "That's My Name"; break;
					case "TreasureHunt": output = "Treasure Hunt"; break;
					case "StepTreasureHunt": output = "Step Treasure Hunt"; break;
				}
			}
		}
		
		
		//Kum
		if (character == "Kum" || character == "all" && output == state && foundException == 0)
		{
			if(mode == "Numpad")
			{
				switch (state)
				{
					case "AntiAir6Hasei": output = "623K"; break;
					case "AntiAirAttack": output = "623K"; break;
					case "AntiAir4Hasei": output = "6234K"; break;
					case "kum406_dagekiEffEX": output = "Charged 6234K"; break;
					case "kum406_dagekiEff": output = "6234K"; break;
					case "LandBlow6Hasei": output = "214K"; break;
					case "kum407_dagekiStartEffEX": output = "Charged 2145K"; break;
					case "kum407_dagekiStartEff": output = "2145K"; break;
					case "LandBlow4Hasei": output = "21[4]K"; break;				
					case "kum409_dagekiEff": output = "21[4]K"; break;
					case "kum409_dagekiEffred": output = "Charged 21[4]K"; break;
					case "AirBlowAttack": output = "j214K"; break;
					case "EnergyBall": output = "236S/H"; break;
					case "HomingEnergyC": output = "236S"; break;
					case "HomingEnergyD": output = "236H"; break;
					case "EnergyBallC_Ready": output = "236S"; break;
					case "EnergyBallD_Ready": output = "236H"; break;
					case "BlackHoleAttack": output = "236236H"; break;
					case "VacuumAttack": output = "236236H"; break;
					case "SuperHomingEnergy": output = "236236S"; break;
					case "SuperEnergyBall": output = "236236S"; break;
				}
			}
			
			 
			
			if(mode == "Real Name" || mode == "TTS Friendly" && state == output && foundException == 0)
			{
				switch (state)
				{
					case "AntiAir6Hasei": output = "Shinken"; break;
					case "AntiAirAttack": output = "Uncharged 623K"; break;
					case "AntiAir4Hasei": output = "Reverse Shinken"; break;
					case "kum406_dagekiEffEX": output = "Red Reverse Shinken"; break;
					case "kum406_dagekiEff": output = "Blue Reverse Shinken"; break;
					case "LandBlow6Hasei": output = "Hayabusa"; break;
					case "kum407_dagekiStartEffEX": output = "Red Hayabusa"; break;
					case "kum407_dagekiStartEff": output = "Blue Hayabusa"; break;
					case "LandBlow4Hasei": output = "Reverse Hayabusa"; break;				
					case "kum409_dagekiEff": output = "Blue Reverse Hayabusa"; break;
					case "kum409_dagekiEffred": output = "Red Reverse Hayabusa"; break;
					case "AirBlowAttack": output = "Air Hayabusa"; break;
					case "EnergyBall": output = "Tuning Ball"; break;
					case "HomingEnergyC": output = "Blue Tuning Ball"; break;
					case "HomingEnergyD": output = "Red Tuning Ball"; break;
					case "EnergyBallC_Ready": output = "Blue Tuning Ball"; break;
					case "EnergyBallD_Ready": output = "Red Tuning Ball"; break;
					case "BlackHoleAttack": output = "Enlightened 3000 Palm Strike"; break;
					case "VacuumAttack": output = "Enlightened 3000 Palm Strike"; break;
					case "SuperHomingEnergy": output = "Celestial Tuning Ball"; break;
					case "SuperEnergyBall": output = "Celestial Tuning Ball"; break;
				}
			}
		}
		
		//Ky
		if (character == "Ky" || character == "all" && output == state && foundException == 0)
		{
			if(mode == "Numpad")
			{
				switch(state)
				{
					case "VaporThrustC": output = "623S"; break;
					case "VaporThrustD": output = "623H"; break;
					case "StunDipper": output = "236K"; break;
					case "StunEdge1": output = "236S"; break;
					case "StunEdgeObj": output = "236S"; break;
					case "ChargedStunEdgeObj": output = "236H (Hit)"; break;
					case "StunEdge2": output = "236H"; break;
					case "AirStunEdge1": output = "j236S"; break;
					case "AirStunEdge2": output = "j236H"; break;
					case "Thunder_stand": output = "Sigil"; break;
					case "HolyBrand": output = "236D"; break;
					case "SPStunEdgeObj": output = "Sigil 236S"; break;
					case "SPChargedStunEdgeObj": output = "Sigil 236H"; break;
					case "AirDustAttackObj": output = "jD"; break;
					case "GreedSaber": output = "214K"; break;
					case "RideTheLightning": output = "632146H"; break;
					case "SacredEdge": output = "236236P"; break;
					case "SPSacredEdgeObj": output = "Sigil 236236P"; break;
				}
			}
			 
			if(mode == "Real Name" || mode == "TTS Friendly" && state == output && foundException == 0)
			{
				switch(state)
				{
					case "VaporThrustC": output = "S Vapor Thrust"; break;
					case "VaporThrustD": output = "H Vapor Thrust"; break;
					case "StunDipper": output = "Stun Dipper"; break;
					case "StunEdge1": output = "Stun Edge"; break;
					case "StunEdgeObj": output = "Stun Edge"; break;
					case "ChargedStunEdgeObj": output = "Charged Stun Edge"; break;
					case "StunEdge2": output = "Charged Stun Edge"; break;
					case "AirStunEdge1": output = "Air S Stun Edge"; break;
					case "AirStunEdge2": output = "Air H Stun Edge"; break;
					case "Thunder_stand": output = "Sigil"; break;
					case "HolyBrand": output = "Split Ciel"; break;
					case "SPStunEdgeObj": output = "Empowered Stun Edge"; break;
					case "SPChargedStunEdgeObj": output = "Grinder"; break;
					case "AirDustAttackObj": output = "Air Sigil"; break;
					case "GreedSaber": output = "Greed Sever"; break;
					case "RideTheLightning": output = "Ride The Lightning"; break;
					case "SacredEdge": output = "SacredEdge"; break;
					case "SPSacredEdgeObj": output = "Empowered Sacred Edge"; break;
				}
			}
		}
		//Leo
		if (character == "Leo" || character == "all" && output == state && foundException == 0)
		{
			if(mode == "Numpad")
			{
				switch (state)
				{
					case "Tobidogu1": output = "[4]6S"; break;
					case "Edgeyowai": output = "[4]6S (Hit)"; break;
					case "Tobidogu2": output = "[4]6H"; break;
					case "Edgetuyoi": output = "[4]6H (Hit)"; break;
					case "AntiAirAttack1": output = "[2]8S"; break;
					case "AntiAirAttack2": output = "[2]8H"; break;
					case "Tossin2": output = "236H"; break;
					case "AirSpecial": output = "j236H"; break;
					case "AirSpecialExe": output = "j236H (Hit)"; break;
					case "Tossin1": output = "236S"; break;
					case "Tossin2_Hasei": output = "~236H"; break;
					case "SemukeDageki_Hasei": output = "~214S"; break;
					case "Semuke": output = "Backturn"; break;
					case "Semuke5A": output = "BT P"; break;
					case "Semuke5B": output = "BT K"; break;
					case "Semuke5C": output = "BT S"; break;
					case "Semuke5D": output = "BT H"; break;
					case "Semuke5E": output = "BT D"; break;
					case "SemukeBDashStep": output = "BT 44"; break;
					case "SemukeFDashStep": output = "BT 66"; break;
					case "SemukeKakusei": output = "BT 632146S"; break;
					case "Gorengeki": output = "632146H"; break;
				}
			}
			 
			if(mode == "Real Name" || mode == "TTS Friendly" && state == output && foundException == 0)
			{
				switch (state)
				{
					case "Tobidogu1": output = "S Boom"; break;
					case "Edgeyowai": output = "S Boom"; break;
					case "Tobidogu2": output = "H Boom"; break;
					case "Edgetuyoi": output = "H Boom"; break;
					case "AntiAirAttack1": output = "S Flash Kick"; break;
					case "AntiAirAttack2": output = "H Flash Kick"; break;
					case "Tossin2": output = "Berserker Slash"; break;
					case "AirSpecial": output = "Siegesparade"; break;
					case "AirSpecialExe": output = "Siegesparade"; break;
					case "Tossin1": output = "Rekka 1"; break;
					case "Tossin2_Hasei": output = "Rekka 2"; break;
					case "SemukeDageki_Hasei": output = "Rekka 3"; break;
					case "Semuke": output = "Backturn"; break;
					case "Semuke5A": output = "Backturn P"; break;
					case "Semuke5B": output = "Backturn K"; break;
					case "Semuke5C": output = "Backturn S"; break;
					case "Semuke5D": output = "Backturn H"; break;
					case "Semuke5E": output = "Counter"; break;
					case "SemukeBDashStep": output = "Back Step"; break;
					case "SemukeFDashStep": output = "Forward Step"; break;
					case "SemukeKakusei": output = "Backturn Super"; break;
					case "Gorengeki": output = "Leidenschaft Dirigent"; break;
				}
			}
		}
		//May
		if (character == "May" || character == "all" && output == state && foundException == 0)
		{
			if(mode == "Numpad")
			{
				switch(state)
				{
					case "IrukasanYokoC": output = "[4]6S"; break;
					case "IrukasanYokoD": output = "[4]6H"; break;
					case "IrukasanTateC": output = "[2]8S"; break;
					case "IrukasanTateD": output = "[2]8H"; break;
					case "RakkoBallA": output = "214P"; break;
					case "MayBallA": output = "214P (Hit)"; break;
					case "RakkoBallB": output = "214K"; break;
					case "MayBallB": output = "214K (Hit)"; break;
					case "DivingAttack": output = "j41236H"; break;
					case "OverHeadKiss": output = "623K"; break;
					case "OverHeadKissEx": output = "623K"; break;
					case "IrukasanYokoAShoukan": output = "41236P"; break;
					case "IrukasanTateAShoukan": output = "41236K"; break;
					case "IrukasanYokoBShoukan": output = "41236S"; break;
					case "IrukasanTateBShoukan": output = "41236H"; break;
					case "IrukasanRidingAttackYokoA": output = "P Ride the Dolphin"; break;
					case "IrukasanRidingAttackTateA": output = "K Ride the Dolphin"; break;
					case "IrukasanRidingAttackYokoB": output = "S Ride the Dolphin"; break;
					case "IrukasanRidingAttackTateB": output = "H Ride the Dolphin"; break;
					case "Yamada": output = "236236S"; break;
					case "Dadakko": output = "632146H"; break;
					case "Daisenpu": output = "632146S"; break;
					case "Goshogawara": output = "~P"; break;
					case "SK_Goshogawara": output = "Goshogawara (Hit)"; break;
				}
			}
			 
			if(mode == "Real Name" || mode == "TTS Friendly" && state == output && foundException == 0)
			{
				switch(state)
				{
					case "IrukasanYokoC": output = "S Totsugeki"; break;
					case "IrukasanYokoD": output = "H Totsugeki"; break;
					case "IrukasanTateC": output = "S Up Dolphin"; break;
					case "IrukasanTateD": output = "H Up Dolphin"; break;
					case "RakkoBallA": output = "P Beach Ball"; break;
					case "MayBallA": output = "P Beach Ball"; break;
					case "RakkoBallB": output = "K Beach Ball"; break;
					case "MayBallB": output = "K Beach Ball"; break;
					case "DivingAttack": output = "Ensenga?"; break;
					case "OverHeadKiss": output = "Overhead Kiss"; break;
					case "OverHeadKissEx": output = "Overhead Kiss"; break;
					case "IrukasanYokoAShoukan": output = "P Applause for the Victim"; break;
					case "IrukasanTateAShoukan": output = "K Applause for the Victim"; break;
					case "IrukasanYokoBShoukan": output = "S Applause for the Victim"; break;
					case "IrukasanTateBShoukan": output = "H Applause for the Victim"; break;
					case "IrukasanRidingAttackYokoA": output = "P Ride the Dolphin"; break;
					case "IrukasanRidingAttackTateA": output = "K Ride the Dolphin"; break;
					case "IrukasanRidingAttackYokoB": output = "S Ride the Dolphin"; break;
					case "IrukasanRidingAttackTateB": output = "H Ride the Dolphin"; break;
					case "Yamada": output = "Great Yamada Attack"; break;
					case "Dadakko": output = "Ultimate Whiner"; break;
					case "Daisenpu": output = "Ultimate Spinning Whirlwind"; break;
					case "Goshogawara": output = "Deluxe Goshogawara Bomber"; break;
					case "SK_Goshogawara": output = "Deluxe Goshogawara Bomber"; break;
				}
			}
		}
		
		//Millia
		if (character == "Millia" || character == "all" && output == state && foundException == 0)
		{
			if(mode == "Numpad")
			{
				switch(state)
				{
					case "BadMoon": output = "j236P"; break;
					case "TandemTopC": output = "236S"; break;
					case "TandemTopD": output = "236H"; break;
					case "KousokuRakka": output = "236K"; break;
					//Nothing to detect which pin
					case "SilentForceKnife": output = "Pin"; break;
					case "SilentForce": output = "j214S\H"; break;
					case "Zenten": output = "214K"; break;
					case "ZentenShaker": output = "~S"; break;
					case "SaiZenten": output = "~K"; break;
					//Exception Required
					case "Digitalis": output = "~H";  foundException = 1; break;
					case "SecretGarden": output = "214H"; break;
					case "SecretGardenBall": output = "214H (Hit)"; break;
					case "LustShaker": output = "214S"; break;
					case "LustShakerRenda": output = "~S"; break;
					case "IronSavior": output = "214P"; break;
					case "Winger": output = "2141236H"; break;
					case "ChromingRose": output = "214214S"; break;
					case "RoseObj": output = "Rose (Hit)"; break;
					case "EmeraldRain": output = "236236S"; break;
					case "EmeraldRainRing1": output = "236236S (Hit)"; break;
					case "EmeraldRainRing2": output = "236236S (Hit)"; break;
					case "EmeraldRainRing3": output = "236236S (Hit)"; break;
				}
			}
			 
			if(mode == "Real Name" || mode == "TTS Friendly" && state == output && foundException == 0)
			{
				switch(state)
				{
					case "BadMoon": output = "Bad Moon"; break;
					case "TandemTopC": output = "S Tandem Top"; break;
					case "TandemTopD": output = "H Tandem Top"; break;
					case "KousokuRakka": output = "Turbo Fall"; break;
					//Nothing to detect which pin
					case "SilentForceKnife": output = "Pin"; break;
					case "SilentForce": output = "S Pin"; break;
					case "Zenten": output = "Roll"; break;
					case "ZentenShaker": output = "Lust Shaker"; break;
					case "SaiZenten": output = "Double Roll"; break;
					//Exception Required
					case "Digitalis": output = "Digitalis";  foundException = 1; break;
					case "SecretGarden": output = "Secret Garden"; break;
					case "SecretGardenBall": output = "Secret Garden"; break;
					case "LustShaker": output = "Lust Shaker"; break;
					case "LustShakerRenda": output = "Lust Shaker"; break;
					case "IronSavior": output = "Hair Car"; break;
					case "Winger": output = "Winger"; break;
					case "ChromingRose": output = "Chroming Rose"; break;
					case "RoseObj": output = "Chroming Rose"; break;
					case "EmeraldRain": output = "Emerald Rain"; break;
					case "EmeraldRainRing1": output = "Emerald Rain"; break;
					case "EmeraldRainRing2": output = "Emerald Rain"; break;
					case "EmeraldRainRing3": output = "Emerald Rain"; break;
				}
			}
		}
		//Potemkin
		if (character == "Potemkin" || character == "all" && output == state && foundException == 0)
		{
			if (mode == "Numpad")
			{
				switch (state)
				{
					case "HammerFall": output = "[4]6H"; break;
					case "HammerFallBrake ": output = "~P"; break;
					case "FDB": output = "214S"; break;
					case "MegaFistFront": output = "236P"; break;
					case "MegaFistBack": output = "214P"; break;
					case "SlideHead": output = "236S"; break;
					case "HeatKnucle": output = "623H"; break;
					case "HeatExtend": output = "63214H"; break;
					case "SlideHead_Obj": output = "236S"; break;
					case "RocketDive": output = "j41236H"; break;
					case "RocketDiveExe": output = "j41236H"; break;
					case "PotemkinBuster": output = "632146P"; break;
					case "PotemkinBusterExe": output = "632146P"; break;
					case "Anti_AirExplode": output = "214K"; break;
					//Exception
					case "Bomb": output = "214K"; break;
					case "HeavenlyPBuster": output = "236236S"; break;
					case "HeavenlyPBusterExe": output = "236236S"; break;
					case "Giganter": output = "632146H"; break;
					case "GiganterObj": output = "632146H"; break;
					case "GiganticBullet": output = "4213641236P"; break;
				}
			}	
			 
			if (mode == "TTS Friendly")
			{
				switch (state)
				{
					case "FDB": output = "F D B"; break;
					case "RocketDive": output = "I C P M"; break;
					case "RocketDiveExe": output = "I C P M"; break;
				}
			}
			 
			if (mode == "Real Name" || mode == "TTS Friendly" && state == output && foundException == 0)
			{
				switch (state)
				{
					case "HammerFall": output = "Hammer Fall"; break;
					case "HammerFallBrake ": output = "Hammer Fall Brake"; break;
					case "FDB": output = "F.D.B."; break;
					case "MegaFistFront": output = "Megafist"; break;
					case "MegaFistBack": output = "Back Megafist"; break;
					case "SlideHead": output = "Slide Head"; break;
					case "HeatKnucle": output = "Heat Knuckle"; break;
					case "HeatExtend": output = "Heat Extend"; break;
					case "SlideHead_Obj": output = "Slide Head"; break;
					case "RocketDive": output = "I.C.P.M."; break;
					case "RocketDiveExe": output = "I.C.P.M."; break;
					case "PotemkinBuster": output = "Potbuster"; break;
					case "PotemkinBusterExe": output = "Potbuster"; break;
					case "Anti_AirExplode": output = "Trishula"; break;
					//Exception
					case "Bomb": output = "Trishula"; break;
					case "HeavenlyPBuster": output = "Heavenly Potemkin Buster"; break;
					case "HeavenlyPBusterExe": output = "Heavenly Potemkin Buster"; break;
					case "Giganter": output = "Giganter Kai"; break;
					case "GiganterObj": output = "Giganter Kai"; break;
					case "GiganticBullet": output = "Gigantic Bullet Kai"; break;
				}
			}
		}
		
		//Ramlethal
		if (character == "Ramlethal" || character == "all" && output == state && foundException == 0)
		{
			if (mode == "Numpad")
			{
				if(state.includes("Combination"))
				{
					switch (state)
					{
						case "CombinationAA": output = "~P"; break;
						case "CombinationAAA": output = "~P"; break;
						case "CombinationAAB": output = "~K"; break;
						case "CombinationAB": output = "~K"; break;
						case "Combination4B": output = "~4K"; break;
						case "Combination2AA": output = "~P"; break;
						case "CombinationBA": output = "~P"; break;
						case "CombinationBAA": output = "~A"; break;
						case "CombinationBB": output = "~K"; break;
						case "CombinationBBB": output = "~K"; break;
						case "Combination2AAB": output = "~K"; break;
						case "Combination2AB": output = "~K"; break;
						case "Combination2BB": output = "~K"; break;
						case "Combination2BA": output = "~P"; break;
						case "Combination2BAB": output = "~K"; break;
						
					}
				}
				else
				{
					switch (state)
					{
						case "6D_Soubi_Land": output = "6H"; break;
						case "6D_Bunri_Land": output = "6H"; break;
						case "6D_Soubi_Air": output = "j6H"; break;
						case "2D_Bunri_Land": output = "2H"; break;
						case "6C_Soubi_Land": output = "6S"; break;
						case "6C_Bunri_Land": output = "6S"; break;
						case "6C_Soubi_Air": output = "j6S"; break;
						case "2C_Bunri_Land": output = "2S"; break;
						case "BitF6D": output = "Summon 6H"; break;
						case "BitN6C": output = "Summon 6H"; break;
						case "FastFujinken": output = "Perfect 623P"; break;
						case "Fujinken": output = "623P"; break;
						case "CommandThrow": output = "236K"; break;
						case "CommandThrowExe": output = "236K"; break;
						//Cross Character Exception Required
						case "BanditRevolverLand": output = "214K"; break;
						case "BanditRevolverAir": output = "j214K"; break;
						case "MiddleShot": output = "214P"; break;
						case "middleShot": output = "214P"; break;
						case "BitBlowC": output = "214S"; break;
						case "BitBlowD": output = "214H"; break;
						case "BitBlowCAir": output = "j214S"; break;
						case "BitBlowDAir": output = "j214H"; break;
						case "BitLaser": output = "632146H"; break;
						case "BitSpiral_NSpiral": output = "632146H"; break;
						case "BitSpiral": output = "632146H"; break;
						case "TosshinRanbu": output = "2363214K"; break;
						case "TosshinRanbuExe": output = "2363214K"; break;
					}
				}
			}
			 
			if (mode == "Real Name" || mode == "TTS Friendly" && state == output && foundException == 0)
			{
				if(state.includes("Combination"))
				{
					switch (state)
					{
						case "CombinationAA": output = "PP Target Combo"; break;
						case "CombinationAAA": output = "PPP Target Combo"; break;
						case "CombinationAAB": output = "PPK Target Combo"; break;
						case "CombinationAB": output = "PK Target Combo"; break;
						case "Combination4B": output = "4K Target Combo Launch Ender"; break;
						case "Combination2AA": output = "P2P Target Combo Variation"; break;
						case "CombinationBA": output = "KP Target Combo"; break;
						case "CombinationBAA": output = "KPP Overhead Ender"; break;
						case "CombinationBB": output = "KK Target Combo"; break;
						case "CombinationBBB": output = "Triple K Target Combo"; break;
						case "Combination2AAB": output = "Target Combo Low Mixup"; break;
						case "Combination2AB": output = "2PK Low Target Combo"; break;
						case "Combination2BB": output = "2KK Low Target Combo"; break;
						case "Combination2BA": output = "2KP Low Target Combo"; break;
						case "Combination2BAB": output = "2KPK Overhead Ender"; break;
						
					}
				}
				else
				{
					switch (state)
					{
						case "6D_Soubi_Land": output = "6H Call"; break;
						case "6D_Bunri_Land": output = "6H Recall"; break;
						case "6D_Soubi_Air": output = "Air 6H Call"; break;
						case "2D_Bunri_Land": output = "2H Recall"; break;
						case "6C_Soubi_Land": output = "6S Call"; break;
						case "6C_Bunri_Land": output = "6S Recall"; break;
						case "6C_Soubi_Air": output = "Air 6S Call"; break;
						case "2C_Bunri_Land": output = "2S Recall"; break;
						case "BitF6D": output = "Summon 6H Attack"; break;
						case "BitN6C": output = "Summon 6H Attack"; break;
						case "Fujinken": output = "Dauro"; break;
						case "Fujinken": output = "Perfect Dauro"; break;
						case "CommandThrow": output = "Flama Cargo"; break;
						case "CommandThrowExe": output = "Flama Cargo"; break;
						//Cross Character Exception Required
						case "BanditRevolverLand": output = "Sildo Detruo"; break;
						case "BanditRevolverAir": output = "Air Sildo Detruo"; break;
						case "MiddleShot": output = "Cassius"; break;
						case "middleShot": output = "Cassius"; break;
						case "BitBlowC": output = "Marteli"; break;
						case "BitBlowD": output = "Forpeli"; break;
						case "BitBlowCAir": output = "Air Marteli"; break;
						case "BitBlowDAir": output = "Air Forpeli"; break;
						case "BitLaser": output = "Calvados"; break;
						case "BitSpiral_NSpiral": output = "Trance"; break;
						case "BitSpiral": output = "Trance"; break;
						case "TosshinRanbu": output = "Explode"; break;
						case "TosshinRanbuExe": output = "Explode"; break;
					}
				}
			}
		}
		
		//Raven
		if (character == "Raven" || character == "all" && output == state && foundException == 0)
		{
			if (mode == "Numpad")
			{
				switch (state)
				{
					case "LandBlowAttack": output = "236S"; break;
					case "LandSettingTypeNeedle": output = "236H"; break;
					case "AirSettingTypeNeedle": output = "j236H"; break;
					case "AirBlowAttack": output = "j236S"; break;
					case "LandSlowNeedle": output = "236P"; break;
					case "ArmorDance": output = "214K"; break;
					case "AirSlowNeedleA": output = "j236P"; break;
					case "AirSlowNeedleB": output = "j236K"; break;
					case "Kakkuu": output = "Airdash"; break;
					case "AntiAirCommandThrow": output = "63214S"; break;
					case "AntiAirCommandThrowEx": output = "63214S"; break;
					case "CommandThrow": output = "63214H"; break;
					case "CommandThrowEx": output = "63214H"; break;
					case "RevengeAttack": output = "214214H"; break;
					case "RevengeAttackEx": output = "214214H"; break;
					case "LandDashAttack": output = "632146S"; break;
					case "AirDashAttack": output = "j632146S"; break;
				}
			}
			 
			if (mode == "Real Name" || mode == "TTS Friendly" && state == output && foundException == 0)
			{
				switch (state)
				{
					case "LandBlowAttack": output = "Claw"; break;
					case "LandSettingTypeNeedle": output = "Orb"; break;
					case "AirSettingTypeNeedle": output = "Air Orb"; break;
					case "AirBlowAttack": output = "Air Claw"; break;
					case "LandSlowNeedle": output = "Needle"; break;
					case "ArmorDance": output = "Give it to me HERE"; break;
					case "AirSlowNeedleA": output = "Air P Needle"; break;
					case "AirSlowNeedleB": output = "Air K Needle"; break;
					case "Kakkuu": output = "Airdash"; break;
					case "AntiAirCommandThrow": output = "S Command Throw"; break;
					case "AntiAirCommandThrowEx": output = "S Command Throw"; break;
					case "CommandThrow": output = "H Command Throw"; break;
					case "CommandThrowEx": output = "H Command Throw"; break;
					case "RevengeAttack": output = "Getreuer"; break;
					case "RevengeAttackEx": output = "Getreuer"; break;
					case "LandDashAttack": output = "Verzweifelt"; break;
					case "AirDashAttack": output = "Air Verzweifelt"; break;
				}
			}
		}
		//Sin
		if (character == "Sin" || character == "all" && output == state && foundException == 0)
		{
			if (mode == "Numpad")
			{
				switch (state)
				{
					case "BeakDriver": output = "236H"; break;
					case "BeakDriver_Air": output = "j236H"; break;
					case "BeakDriver_Renda": output = "Mash H"; break;
					case "Tatakitsuke": output = "214S"; break;
					case "Ashibarai": output = "236K"; break;
					case "EatMeat": output = "214H"; break;
					case "TobiagariA": output = "214P"; break;
					case "TobiagariB": output = "214K"; break;
					case "RideTheLightning": output = "632146H"; break;
					case "PhantomBarrel_Land": output = "236236P"; break;
					case "Shot_Land": output = "236236P (Hit)"; break;
					case "PhantomBarrel_Air": output = "j236236P"; break;
					case "Shot_Air": output = "j236236P (Hit)"; break;
					case "UkaseWaza": output = "623S"; break;
					case "Tatakiage": output = "j214S"; break;
				}
			}
			 
			if (mode == "TTS Friendly" && state == output && foundException == 0)
			{
				switch (state)
				{
					case "RideTheLightning": output = "R T L"; break;
				}
			}
			 
			if (mode == "Real Name" || mode == "TTS Friendly" && state == output && foundException == 0)
			{
				switch (state)
				{
					case "BeakDriver": output = "Beak Driver"; break;
					case "BeakDriver_Air": output = "Air Beak Driver"; break;
					case "BeakDriver_Renda": output = "Beak Driver Followup"; break;
					case "Tatakitsuke": output = "Bull Bash"; break;
					case "Ashibarai": output = "Elk Hunt"; break;
					case "EatMeat": output = "Eat"; break;
					case "TobiagariA": output = "P Leap"; break;
					case "TobiagariB": output = "K Leap"; break;
					case "RideTheLightning": output = "R.T.L."; break;
					case "PhantomBarrel_Land": output = "Voltec Dein"; break;
					case "Shot_Land": output = "Voltec Dein"; break;
					case "PhantomBarrel_Air": output = "Air Voltec Dein"; break;
					case "Shot_Air": output = "Air Voltec Dein"; break;
					case "UkaseWaza": output = "Hawk Baker"; break;
					case "Tatakiage": output = "Vulture Seize"; break;
				}
			}
		}
		//Slayer
		if (character == "Slayer" || character == "all" && output == state && foundException == 0)
		{
			if (mode == "Numpad")
			{
				switch (state)
				{
					case "DandyStepA": output = "214P"; break;
					case "DandyStepB": output = "214K"; break;
					case "PileBunker": output = "~P"; break;
					case "CrossWise": output = "~K"; break;
					case "UnderPressure": output = "~S"; break;
					case "ItsLate": output = "~S"; break;
					case "RetroFire": output = "~H"; break;
					case "Retro": output = "~H"; break;
					case "ChiwosuuUchuu": output = "63214H"; break;
					case "ChiwosuuUchuuExe": output = "63214H"; break;
					case "MappaHunchA": output = "236P"; break;
					case "MappaHunchB": output = "236K"; break;
					case "DeadOnTime": output = "632146S"; break;
					case "FootLoose": output = "j214K"; break;
					case "UnderTow": output = "632146P"; break;
					case "EinNoTsubasa": output = "236236H"; break;
					case "Chokkagata Dandy": output = "j236236S"; break;
					case "6BFeint": output = "6[K]"; break;
				}
			}
			 
			if (mode == "TTS Friendly" && state == output && foundException == 0)
			{
				switch (state)
				{
					case "6BFeint": output = "6 K Feint"; break;	
				}
			}
			 
			if (mode == "Real Name" || mode == "TTS Friendly" && state == output && foundException == 0)
			{
				switch (state)
				{
					case "DandyStepA": output = "P Dandy Step"; break;
					case "DandyStepB": output = "K Dandy Step"; break;
					case "PileBunker": output = "Pilebunker"; break;
					case "CrossWise": output = "Crosswise Heel"; break;
					case "UnderPressure": output = "Under Pressure"; break;
					case "ItsLate": output = "It's Late"; break;
					case "RetroFire": output = "Helter Skelter"; break;
					case "Retro": output = "Helter Skelter"; break;
					case "ChiwosuuUchuu": output = "Bloodsucking Universe"; break;
					case "ChiwosuuUchuuExe": output = "Bloodsucking Universe"; break;
					case "MappaHunchA": output = "P Mappa"; break;
					case "MappaHunchB": output = "K Mappa"; break;
					case "DeadOnTime": output = "Dead On Time"; break;
					case "FootLoose": output = "Footloose Journey"; break;
					case "UnderTow": output = "Undertow"; break;
					case "EinNoTsubasa": output = "Eternal Wings"; break;
					case "Chokkagata Dandy": output = "Straight-Down Dandy"; break;
					case "6BFeint": output = "6K Feint"; break;
					case "Kyuketsu_charge": output = "Bite Buff"; break;
				}
			}
		}
		//Sol
		if (character == "Sol" || character == "all" && output == state && foundException == 0)
		{
			if (mode == "Numpad")
			{
				if(state.includes("_DI"))
				{
					switch (state)
					{
						case "TyrantRave_DI": output = "632146H"; break;
						case "GunFlameHibashiraDI": output = "236P"; break;
						case "Fefnir_DI": output = "41236H"; break;
						case "BanditBringer_DI": output = "236[K]"; break;
						case "BanditRevolverLand_DI": output = "236K"; break;
						case "RiotStamp_DI": output = "214K"; break;
						case "Kudakero_DI": output = "j214K"; break;
					}
				} 
				else
				{
					switch(state)
					{
						case "VolcanicViperLandS": output = "623S"; break;
						case "VolcanicViperLandHS": output = "623H"; break;
						case "VolcanicViperAirS": output = "j623S"; break;
						case "VolcanicViperAirHS": output = "j623H"; break;
						case "VolcanicViperKick": output = "~K"; break;
						case "GunFlame": output = "236P"; break;
						case "GunFlameFeint": output = "214P"; break;
						case "BukkirabouNiNageru": output = "623K"; break;
						case "BukkiraExe": output = "623K"; break;
						case "BanditRevolverLand": output = "236K"; break;
						case "BanditRevolverAir": output = "j236K"; break;
						case "BanditBringer": output = "236[K]"; break;
						case "Fefnir": output = "41236H"; break;
						case "RiotStamp": output = "214K"; break;
						case "GroundViper": output = "214S"; break;
						case "Kudakero": output = "j214K"; break;
						case "TyrantRave": output = "632146H"; break;
						case "DragonInstall": output = "214214H"; break;
						case "GunFlameHibashira": output = "236P"; break;
						case "AirCommandThrow": output = "j623K"; break;
					}
				}
			}
			if (mode == "TTS Friendly" && state == output && foundException == 0)
			{
				switch (state)
				{
					case "AirCommandThrow": output = "P B B"; break;
				}
			}
			 
			if (mode == "Real Name" || mode == "TTS Friendly" && state == output && foundException == 0)
			{
				if(state.includes("_DI"))
				{
					switch (state)
					{
						case "TyrantRave_DI": output = "Dragon Install Tyrant Rave"; break;
						case "GunFlameHibashiraDI": output = "Dragon Install Gunflame"; break;
						case "Fefnir_DI": output = "Dragon Install Fafnir"; break;
						case "BanditBringer_DI": output = "Dragon Install Bandit Bringer"; break;
						case "BanditRevolverLand_DI": output = "Dragon Install Bandit Revolver"; break;
						case "RiotStamp_DI": output = "Dragon Install Riot Stamp"; break;
						case "Kudakero_DI": output = "Dragon Install Kudakero"; break;
					}
				} 
				else
				{
					switch(state)
					{
						case "VolcanicViperLandS": output = "S Volcanic Viper"; break;
						case "VolcanicViperLandHS": output = "H Volcanic Viper"; break;
						case "VolcanicViperAirS": output = "Air S Volcanic Viper"; break;
						case "VolcanicViperAirHS": output = "Air H Volcanic Viper"; break;
						case "VolcanicViperKick": output = "Volcanic Viper (Leggy)"; break;
						case "GunFlame": output = "Gunflame"; break;
						case "GunFlameFeint": output = "Gunflame Feint"; break;
						case "BukkirabouNiNageru": output = "Wild Throw"; break;
						case "BukkiraExe": output = "Wild Throw"; break;
						case "BanditRevolverLand": output = "Bandit Revolver"; break;
						case "BanditRevolverAir": output = "Air Bandit Revolver"; break;
						case "BanditBringer": output = "Bandit Bringer"; break;
						case "Fefnir": output = "Fafnir"; break;
						case "RiotStamp": output = "Riot Stamp"; break;
						case "GroundViper": output = "Grand Viper"; break;
						case "Kudakero": output = "Kudakero"; break;
						case "TyrantRave": output = "Tyrant Rave ver. Beta"; break;
						case "DragonInstall": output = "Dragon Install"; break;
						case "ExKizetsu": output = "Dragon Install Recovery"; break;
						case "GunFlameHibashira": output = "Gunflame"; break;
						case "AirCommandThrow": output = "P.B.B."; break;
					}
				}
			}
		}
		//Venom
		if (character == "Venom" || character == "all" && output == state && foundException == 0)
		{
			if (mode == "Numpad")
			{
				switch(state)
				{
					case "BallSeiseiA": output = "214P"; break;
					case "BallSeiseiB": output = "214K"; break;
					case "BallSeiseiC": output = "214S"; break;
					case "BallSeiseiD": output = "214H"; break;
					case "AirBallSeiseiA": output = "j214P"; break;
					case "AirBallSeiseiB": output = "j214K"; break;
					case "AirBallSeiseiC": output = "j214S"; break;
					case "AirBallSeiseiD": output = "j214H"; break;
					case "StingerAimC": output = "[4]6S"; break;
					case "StingerAimD": output = "[4]6H"; break;
					case "CarcassRaidC": output = "[2]8S"; break;
					case "CarcassRaidD": output = "[2]8H"; break;
					case "DoubleHeadMorbidC": output = "623S"; break;
					case "DoubleHeadMorbidD": output = "623H"; break;
					case "MadStrugguleC": output = "j236S"; break;
					case "MadStrugguleD": output = "j236S"; break;
					case "Warp": output = "623K"; break;
					case "WarpB": output = "~[X]"; break;
					case "DubiousCurveA": output = "41236P"; break;
					case "DubiousCurveB": output = "41236K"; break;
					case "DubiousCurveC": output = "41236S"; break;
					case "DubiousCurveD": output = "41236H"; break;
					case "DarkAngel": output = "2363214S"; break;
					case "DarkAngelBall": output = "2363214S (Hit)"; break;
					case "SummonGoldBall": output = "2363214H"; break;
					case "ThrowBallEffect": output = "Throw"; break;
				}
			}
			 
			if (mode == "TTS Friendly" && state == output && foundException == 0)
			{
				switch(state)
				{
					case "DubiousCurveA": output = "P Q V"; break;
					case "DubiousCurveB": output = "K Q V"; break;
					case "DubiousCurveC": output = "S Q V"; break;
					case "DubiousCurveD": output = "H Q V"; break;
					case "BallAuraLv3": output = "X L Pool Ball"; break;
					case "BallAuraLv4": output = "X X L Pool Ball"; break;
				}
			}
			 
			if (mode == "Real Name" || mode == "TTS Friendly" && state == output && foundException == 0)
			{
				switch(state)
				{
					case "BallSeiseiA": output = "P Set"; break;
					case "BallSeiseiB": output = "K Set"; break;
					case "BallSeiseiC": output = "S Set"; break;
					case "BallSeiseiD": output = "H Set"; break;
					case "AirBallSeiseiA": output = "Air P Set"; break;
					case "AirBallSeiseiB": output = "Air K Set"; break;
					case "AirBallSeiseiC": output = "Air S Set"; break;
					case "AirBallSeiseiD": output = "Air H Set"; break;
					case "StingerAimC": output = "S Stinger Aim"; break;
					case "StingerAimD": output = "H Stinger Aim"; break;
					case "CarcassRaidC": output = "S Carcass Raid"; break;
					case "CarcassRaidD": output = "H Carcass Raid"; break;
					case "DoubleHeadMorbidC": output = "S Double Head Morbid"; break;
					case "DoubleHeadMorbidD": output = "H Double Head Morbid"; break;
					case "MadStrugguleC": output = "S Mad Struggle"; break;
					case "MadStrugguleD": output = "H Mad Struggle"; break;
					case "Warp": output = "Teleport"; break;
					case "WarpB": output = "Teleport"; break;
					case "DubiousCurveA": output = "P QV"; break;
					case "DubiousCurveB": output = "K QV"; break;
					case "DubiousCurveC": output = "S QV"; break;
					case "DubiousCurveD": output = "H QV"; break;
					case "Ball": output = "Pool Ball"; break;
					case "BallZanzoh": output = "Pool Ball"; break;
					case "BallAuraLv2": output = "Large Pool Ball"; break;
					case "BallAuraLv3": output = "XL Pool Ball"; break;
					case "BallAuraLv4": output = "XXL Pool Ball"; break;
					case "DarkAngel": output = "Dark Angel"; break;
					case "DarkAngelBall": output = "Dark Angel"; break;
					case "SummonGoldBall": output = "Bishop Runout"; break;
					case "ThrowBallEffect": output = "Throw Ball"; break;
				}
			}
		}
		//Zato-1
		if (character == "Zato-1" || character == "all" && output == state && foundException == 0)
		{
			if (mode == "Numpad")
			{
				switch(state)
				{
					case "Fly": output = "Flight"; break;
					case "EddieSummonA": output = "236P"; break;
					case "EddieSummonB": output = "236K"; break;
					case "EddieSummonC": output = "236S"; break;
					case "EddieSummonD2": output = "236H"; break;
					case "EddieA": output = "]P["; break;
					case "EddieB": output = "]K["; break;
					case "EddieC": output = "]S["; break;
					case "EddieD": output = "]H["; break;
					case "EddieReturn": output = "236H"; break;
					case "ChouDoriru": output = "]D["; break;
					case "Dhand_atk": output = "236]D["; break;
					case "EddieThrow": output = "236]D["; break;
					case "DrunkerdShade": output = "214S"; break;
					case "ShadowGallery": output = "j41236S"; break;
					case "BreakTheLaw": output = "214K"; break;
					case "InviteHellC": output = "22S"; break;
					case "InviteHellD": output = "22H"; break;
					case "DamnedFang": output = "623S"; break;
					case "DamnedFangExe": output = "623S"; break;
					case "Amorphous": output = "632146H"; break;
					case "AmorphousObj": output = "632146H (Hit)"; break;
					case "MegalithHead": output = "632146S"; break;
					case "EddieMegalithHead": output = "632146S (Hit)"; break;
					case "Executer": output = "236236S"; break;
				}
			}
			 
			if (mode == "Real Name" || mode == "TTS Friendly" && state == output && foundException == 0)
			{
				switch(state)
				{
					case "Fly": output = "Flight"; break;
					case "EddieSummonA": output = "Summon Eddie"; break;
					case "EddieSummonB": output = "Summon Eddie"; break;
					case "EddieSummonC": output = "Summon Eddie"; break;
					case "EddieSummonD2": output = "Summon Eddie"; break;
					case "EddieA": output = "Small Attack"; break;
					case "EddieB": output = "Mawaru"; break;
					case "EddieC": output = "Nobiru"; break;
					case "EddieD": output = "Shadow Dive"; break;
					case "EddieReturn": output = "Recall Eddie"; break;
					case "ChouDoriru": output = "Big Drill"; break;
					case "Dhand_atk": output = "Dead Man's Hand"; break;
					case "EddieThrow": output = "Dead Man's Hand"; break;
					case "DrunkerdShade": output = "Drunkard Shade"; break;
					case "ShadowGallery": output = "Shadow Gallery"; break;
					case "BreakTheLaw": output = "Break The Law"; break;
					case "InviteHellC": output = "S Invite Hell"; break;
					case "InviteHellD": output = "H Invite Hell"; break;
					case "DamnedFang": output = "Damned Fang"; break;
					case "DamnedFangExe": output = "Damned Fang"; break;
					case "Amorphous": output = "Amorphous"; foundException = 1; break;
					case "AmorphousObj": output = "Amorphous"; break;
					case "MegalithHead": output = "Great White"; break;
					case "EddieMegalithHead": output = "Great White"; break;
					case "Executer": output = "Executor"; break;
					case "KageDamari": output = "Puddle"; break;
				}
			}
		}

		SAMMI.setVariable(returnVariable, output, FromButton);
	});
}
[insert_over]
{ "deck_data": "{ \"background_color\": 4210752.0, \"on\": true, \"grid_y\": 3.0, \"snap_grid\": 1.0, \"lb_version\": \"2024.4.0\", \"background_image\": \"\", \"sammi_version\": \"2024.4.0\", \"encrypted\": 0.0, \"adaptive_resizing\": 1.0, \"unique_id\": \"20241119022034255051982\", \"button_list\": [ { \"color\": 0.0, \"persistent\": 1.0, \"text\": \"CONNECT TO XRD\\n\\n\\n\\n\\n\\n\\nDO CRIMES\", \"release_duration\": 0.0, \"queueable\": 0.0, \"command_list\": [ { \"cmd\": 0.0, \"obsid\": \"Main\", \"msg\": \"message\", \"url\": \"ws:\\\/\\\/localhost:6651\", \"pos\": 0.0, \"vis\": 1.0, \"ms\": 1000.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"error\": \"error\", \"extcmd\": \"Create Xrd Websocket\", \"buttonID\": \"Xrd_Data\", \"status\": \"status\", \"name\": \"xturd_websocket\", \"ext\": \"SAMMI Bridge\" } ], \"press_type\": 0.0, \"x\": 0.0, \"is_transparent\": 0.0, \"border\": 1.0, \"image\": \"RoboFaustBanner.png\", \"triggers\": [ { \"group_id\": \"\", \"type\": \"SAMMI Bridge Connected\", \"button_id\": \"Xrd_Connect\", \"trg\": 10.0 } ], \"group_id\": \"\", \"overlappable\": 0.0, \"init_variable\": \"{\\n\\\"connected\\\":0\\n}\", \"deck\": 1.0, \"width\": 0.33333333333333331482961625624739, \"button_id\": \"Xrd_Connect\", \"button_duration\": 1000.0, \"y\": 0.33333333333333331482961625624739, \"switch_deck\": \"\", \"height\": 0.33333333333333331482961625624739, \"release_list\": [ ], \"functions\": 2129.0, \"stretch\": 0.0 }, { \"color\": 12632256.0, \"persistent\": 1.0, \"text\": \"REFERENCE MY\\nDATA OFTEN!\\n\\n\\n\\n\\n\\nGA GA GA GA!\", \"release_duration\": 0.0, \"queueable\": 1.0, \"command_list\": [ ], \"press_type\": 0.0, \"x\": 0.33333333333333331482961625624739, \"is_transparent\": 0.0, \"border\": 1.0, \"image\": \"RoboFaustBanner.png\", \"triggers\": [ ], \"group_id\": \"\", \"overlappable\": 0.0, \"init_variable\": \"{\\n\\\"data\\\":{\\\"data\\\":{\\\"current_frame\\\":0}}\\n}\", \"deck\": 1.0, \"width\": 0.33333333333333331482961625624739, \"button_id\": \"Xrd_Data\", \"button_duration\": 0.0, \"y\": 0.33333333333333331482961625624739, \"switch_deck\": \"\", \"height\": 0.33333333333333331482961625624739, \"release_list\": [ ], \"functions\": 2240.0, \"stretch\": 0.0 }, { \"color\": 12632256.0, \"persistent\": 1.0, \"text\": \"FILL ME WITH TRIGGERS!\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nSPECIFICALLY THE\\n\\\"TRIGGER BUTTON\\\" COMMAND\", \"release_duration\": 0.0, \"queueable\": 0.0, \"command_list\": [ { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 0.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 54.0, \"b0\": \"If you want a button to trigger on a repeat interval in time with gamestate data, put them within the fields below.\\n\\n-Krack\", \"v0\": 0.0 }, { \"b53\": \"\", \"b5\": \"\", \"b13\": \"==\", \"v14\": 0.0, \"b36\": \"\", \"b38\": \"\", \"v10\": 0.0, \"b32\": \"\", \"b19\": \"==\", \"b57\": \"\", \"b59\": \"\", \"b17\": \"\", \"b1\": \"!=\", \"v18\": 0.0, \"v16\": 0.0, \"b34\": \"==\", \"b7\": \"==\", \"b11\": \"\", \"b9\": \"\", \"b51\": \"\", \"b15\": \"\", \"b3\": \"\", \"b55\": \"==\", \"v12\": 0.0, \"cmd\": 7.0, \"b30\": \"\", \"b43\": \"==\", \"v21\": 0.0, \"v1\": 0.0, \"b26\": \"\", \"b28\": \"==\", \"obsid\": \"Main\", \"b22\": \"==\", \"pos\": 1.0, \"v5\": 0.0, \"b47\": \"\", \"b49\": \"==\", \"v3\": 0.0, \"vis\": 1.0, \"b24\": \"\", \"ms\": 0.0, \"b41\": \"\", \"sel\": false, \"b45\": \"\", \"v9\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b20\": \"\", \"v7\": 0.0, \"b33\": \"\", \"v11\": 0.0, \"b16\": \"==\", \"b0\": \"frame_diff\", \"b58\": \"==\", \"b56\": \"\", \"b18\": \"\", \"b4\": \"==\", \"b12\": \"\", \"b52\": \"==\", \"b39\": \"\", \"b37\": \"==\", \"v15\": 0.0, \"b54\": \"\", \"b14\": \"\", \"b2\": \"Xrd_Data.data.data.current_frame\", \"b31\": \"==\", \"v13\": 0.0, \"b35\": \"\", \"v17\": 0.0, \"v19\": 0.0, \"b50\": \"\", \"b8\": \"\", \"b6\": \"\", \"b10\": \"==\", \"b23\": \"\", \"v4\": 0.0, \"b48\": \"\", \"b46\": \"==\", \"v20\": 0.0, \"b42\": \"\", \"b29\": \"\", \"v0\": 10.0, \"b27\": \"\", \"b44\": \"\", \"b21\": \"\", \"v6\": 0.0, \"v8\": 0.0, \"v2\": 1.0, \"b25\": \"==\", \"b40\": \"==\", \"v22\": 0.0 }, { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 2.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"Add all buttons that want a 60Hz update here.\", \"v0\": 0.0 }, { \"b53\": \"\", \"b5\": \"\", \"b13\": \"==\", \"v14\": 0.0, \"b36\": \"\", \"b38\": \"\", \"v10\": 0.0, \"b32\": \"\", \"b19\": \"==\", \"b57\": \"\", \"b59\": \"\", \"b17\": \"\", \"b1\": \"==\", \"v18\": 0.0, \"v16\": 0.0, \"b34\": \"==\", \"b7\": \"==\", \"b11\": \"\", \"b9\": \"\", \"b51\": \"\", \"b15\": \"\", \"b3\": \"\", \"b55\": \"==\", \"v12\": 0.0, \"cmd\": 7.0, \"b30\": \"\", \"b43\": \"==\", \"v21\": 0.0, \"v1\": 0.0, \"b26\": \"\", \"b28\": \"==\", \"obsid\": \"Main\", \"b22\": \"==\", \"pos\": 3.0, \"v5\": 0.0, \"b47\": \"\", \"b49\": \"==\", \"v3\": 0.0, \"vis\": 1.0, \"b24\": \"\", \"ms\": 0.0, \"b41\": \"\", \"sel\": false, \"b45\": \"\", \"v9\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b20\": \"\", \"v7\": 0.0, \"b33\": \"\", \"v11\": 0.0, \"b16\": \"==\", \"b0\": \"(count mod 2)\", \"b58\": \"==\", \"b56\": \"\", \"b18\": \"\", \"b4\": \"==\", \"b12\": \"\", \"b52\": \"==\", \"b39\": \"\", \"b37\": \"==\", \"v15\": 0.0, \"b54\": \"\", \"b14\": \"\", \"b2\": \"0\", \"b31\": \"==\", \"v13\": 0.0, \"b35\": \"\", \"v17\": 0.0, \"v19\": 0.0, \"b50\": \"\", \"b8\": \"\", \"b6\": \"\", \"b10\": \"==\", \"b23\": \"\", \"v4\": 0.0, \"b48\": \"\", \"b46\": \"==\", \"v20\": 0.0, \"b42\": \"\", \"b29\": \"\", \"v0\": 1.0, \"b27\": \"\", \"b44\": \"\", \"b21\": \"\", \"v6\": 0.0, \"v8\": 0.0, \"v2\": 1.0, \"b25\": \"==\", \"b40\": \"==\", \"v22\": 0.0 }, { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 4.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"Add all buttons that want a 30Hz update here.\", \"v0\": 0.0 }, { \"b53\": \"\", \"b5\": \"\", \"b13\": \"==\", \"v14\": 0.0, \"b36\": \"\", \"b38\": \"\", \"v10\": 0.0, \"b32\": \"\", \"b19\": \"==\", \"b57\": \"\", \"b59\": \"\", \"b17\": \"\", \"b1\": \"==\", \"v18\": 0.0, \"v16\": 0.0, \"b34\": \"==\", \"b7\": \"==\", \"b11\": \"\", \"b9\": \"\", \"b51\": \"\", \"b15\": \"\", \"b3\": \"\", \"b55\": \"==\", \"v12\": 0.0, \"cmd\": 7.0, \"b30\": \"\", \"b43\": \"==\", \"v21\": 0.0, \"v1\": 0.0, \"b26\": \"\", \"b28\": \"==\", \"obsid\": \"Main\", \"b22\": \"==\", \"pos\": 5.0, \"v5\": 0.0, \"b47\": \"\", \"b49\": \"==\", \"v3\": 0.0, \"vis\": 1.0, \"b24\": \"\", \"ms\": 0.0, \"b41\": \"\", \"sel\": false, \"b45\": \"\", \"v9\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b20\": \"\", \"v7\": 0.0, \"b33\": \"\", \"v11\": 0.0, \"b16\": \"==\", \"b0\": \"(count mod 4)\", \"b58\": \"==\", \"b56\": \"\", \"b18\": \"\", \"b4\": \"==\", \"b12\": \"\", \"b52\": \"==\", \"b39\": \"\", \"b37\": \"==\", \"v15\": 0.0, \"b54\": \"\", \"b14\": \"\", \"b2\": \"0\", \"b31\": \"==\", \"v13\": 0.0, \"b35\": \"\", \"v17\": 0.0, \"v19\": 0.0, \"b50\": \"\", \"b8\": \"\", \"b6\": \"\", \"b10\": \"==\", \"b23\": \"\", \"v4\": 0.0, \"b48\": \"\", \"b46\": \"==\", \"v20\": 0.0, \"b42\": \"\", \"b29\": \"\", \"v0\": 1.0, \"b27\": \"\", \"b44\": \"\", \"b21\": \"\", \"v6\": 0.0, \"v8\": 0.0, \"v2\": 1.0, \"b25\": \"==\", \"b40\": \"==\", \"v22\": 0.0 }, { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 6.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"Add all buttons that want a 15Hz update here.\", \"v0\": 0.0 }, { \"b53\": \"\", \"b5\": \"\", \"b13\": \"==\", \"v14\": 0.0, \"b36\": \"\", \"b38\": \"\", \"v10\": 0.0, \"b32\": \"\", \"b19\": \"==\", \"b57\": \"\", \"b59\": \"\", \"b17\": \"\", \"b1\": \"==\", \"v18\": 0.0, \"v16\": 0.0, \"b34\": \"==\", \"b7\": \"==\", \"b11\": \"\", \"b9\": \"\", \"b51\": \"\", \"b15\": \"\", \"b3\": \"\", \"b55\": \"==\", \"v12\": 0.0, \"cmd\": 7.0, \"b30\": \"\", \"b43\": \"==\", \"v21\": 0.0, \"v1\": 0.0, \"b26\": \"\", \"b28\": \"==\", \"obsid\": \"Main\", \"b22\": \"==\", \"pos\": 7.0, \"v5\": 0.0, \"b47\": \"\", \"b49\": \"==\", \"v3\": 0.0, \"vis\": 1.0, \"b24\": \"\", \"ms\": 0.0, \"b41\": \"\", \"sel\": false, \"b45\": \"\", \"v9\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b20\": \"\", \"v7\": 0.0, \"b33\": \"\", \"v11\": 0.0, \"b16\": \"==\", \"b0\": \"(count mod 12)\", \"b58\": \"==\", \"b56\": \"\", \"b18\": \"\", \"b4\": \"==\", \"b12\": \"\", \"b52\": \"==\", \"b39\": \"\", \"b37\": \"==\", \"v15\": 0.0, \"b54\": \"\", \"b14\": \"\", \"b2\": \"0\", \"b31\": \"==\", \"v13\": 0.0, \"b35\": \"\", \"v17\": 0.0, \"v19\": 0.0, \"b50\": \"\", \"b8\": \"\", \"b6\": \"\", \"b10\": \"==\", \"b23\": \"\", \"v4\": 0.0, \"b48\": \"\", \"b46\": \"==\", \"v20\": 0.0, \"b42\": \"\", \"b29\": \"\", \"v0\": 1.0, \"b27\": \"\", \"b44\": \"\", \"b21\": \"\", \"v6\": 0.0, \"v8\": 0.0, \"v2\": 1.0, \"b25\": \"==\", \"b40\": \"==\", \"v22\": 0.0 }, { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 8.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"Add all buttons that want a 5Hz update here.\", \"v0\": 0.0 }, { \"b53\": \"\", \"b5\": \"\", \"b13\": \"==\", \"v14\": 0.0, \"b36\": \"\", \"b38\": \"\", \"v10\": 0.0, \"b32\": \"\", \"b19\": \"==\", \"b57\": \"\", \"b59\": \"\", \"b17\": \"\", \"b1\": \"==\", \"v18\": 0.0, \"v16\": 0.0, \"b34\": \"==\", \"b7\": \"==\", \"b11\": \"\", \"b9\": \"\", \"b51\": \"\", \"b15\": \"\", \"b3\": \"\", \"b55\": \"==\", \"v12\": 0.0, \"cmd\": 7.0, \"b30\": \"\", \"b43\": \"==\", \"v21\": 0.0, \"v1\": 0.0, \"b26\": \"\", \"b28\": \"==\", \"obsid\": \"Main\", \"b22\": \"==\", \"pos\": 9.0, \"v5\": 0.0, \"b47\": \"\", \"b49\": \"==\", \"v3\": 0.0, \"vis\": 1.0, \"b24\": \"\", \"ms\": 0.0, \"b41\": \"\", \"sel\": false, \"b45\": \"\", \"v9\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b20\": \"\", \"v7\": 0.0, \"b33\": \"\", \"v11\": 0.0, \"b16\": \"==\", \"b0\": \"(count mod 60)\", \"b58\": \"==\", \"b56\": \"\", \"b18\": \"\", \"b4\": \"==\", \"b12\": \"\", \"b52\": \"==\", \"b39\": \"\", \"b37\": \"==\", \"v15\": 0.0, \"b54\": \"\", \"b14\": \"\", \"b2\": \"0\", \"b31\": \"==\", \"v13\": 0.0, \"b35\": \"\", \"v17\": 0.0, \"v19\": 0.0, \"b50\": \"\", \"b8\": \"\", \"b6\": \"\", \"b10\": \"==\", \"b23\": \"\", \"v4\": 0.0, \"b48\": \"\", \"b46\": \"==\", \"v20\": 0.0, \"b42\": \"\", \"b29\": \"\", \"v0\": 1.0, \"b27\": \"\", \"b44\": \"\", \"b21\": \"\", \"v6\": 0.0, \"v8\": 0.0, \"v2\": 1.0, \"b25\": \"==\", \"b40\": \"==\", \"v22\": 0.0 }, { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 10.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"Add all buttons that want a 1Hz update here.\", \"v0\": 0.0 }, { \"b1\": \"+=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 11.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"count\", \"b2\": \"1\" }, { \"b1\": \"=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 12.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"frame_diff\", \"b2\": \"Xrd_Data.data.data.current_frame\" } ], \"press_type\": 0.0, \"x\": 0.66666666666666662965923251249478, \"is_transparent\": 0.0, \"border\": 1.0, \"image\": \"RoboFaustBanner.png\", \"triggers\": [ { \"group_id\": \"\", \"timer\": 16.0, \"button_id\": \"Xrd_Triggers\", \"trg\": 8.0 } ], \"group_id\": \"\", \"overlappable\": 0.0, \"init_variable\": \"{\\n\\\"count\\\":0,\\n\\\"frame_diff\\\":0\\n}\", \"deck\": 1.0, \"width\": 0.33333333333333331482961625624739, \"button_id\": \"Xrd_Triggers\", \"button_duration\": 0.0, \"y\": 0.33333333333333331482961625624739, \"switch_deck\": \"\", \"height\": 0.33333333333333331482961625624739, \"release_list\": [ ], \"functions\": 2129.0, \"stretch\": 0.0 }, { \"color\": 12632256.0, \"persistent\": 1.0, \"text\": \"Xrd_Connect\\n\\nThis button connects\\nSAMMI to Xrd.\\n\\nIt tries its best to be automatic.\", \"release_duration\": 0.0, \"queueable\": 0.0, \"command_list\": [ ], \"press_type\": 0.0, \"x\": 0.0, \"is_transparent\": 1.0, \"border\": 2.0, \"image\": \"\", \"triggers\": [ ], \"group_id\": \"\", \"overlappable\": 0.0, \"init_variable\": \"\", \"deck\": 1.0, \"width\": 0.33333333333333331482961625624739, \"button_id\": \"Xrd_Text_1\", \"button_duration\": 0.0, \"y\": 0.0, \"switch_deck\": \"\", \"height\": 0.33333333333333331482961625624739, \"release_list\": [ ], \"functions\": 64.0, \"stretch\": 0.0 }, { \"color\": 12632256.0, \"persistent\": 1.0, \"text\": \"Xrd_Data\\n\\nDuring a match, fills with\\nnew data every frame.\", \"release_duration\": 0.0, \"queueable\": 0.0, \"command_list\": [ ], \"press_type\": 0.0, \"x\": 0.33333333333333331482961625624739, \"is_transparent\": 1.0, \"border\": 2.0, \"image\": \"\", \"triggers\": [ ], \"group_id\": \"\", \"overlappable\": 0.0, \"init_variable\": \"\", \"deck\": 1.0, \"width\": 0.33333333333333331482961625624739, \"button_id\": \"Xrd_Text_2\", \"button_duration\": 0.0, \"y\": 0.0, \"switch_deck\": \"\", \"height\": 0.33333333333333331482961625624739, \"release_list\": [ ], \"functions\": 64.0, \"stretch\": 0.0 }, { \"color\": 12632256.0, \"persistent\": 1.0, \"text\": \"Xrd_Triggers\\n\\nFor buttons you want to\\nrun logic on every frame\\nof gameplay with.\\n\\nUse this for anything that can't be\\ndone by the Extension Triggers.\", \"release_duration\": 0.0, \"queueable\": 0.0, \"command_list\": [ ], \"press_type\": 0.0, \"x\": 0.66666666666666662965923251249478, \"is_transparent\": 1.0, \"border\": 2.0, \"image\": \"\", \"triggers\": [ ], \"group_id\": \"\", \"overlappable\": 0.0, \"init_variable\": \"\", \"deck\": 1.0, \"width\": 0.33333333333333331482961625624739, \"button_id\": \"Xrd_Text_3\", \"button_duration\": 0.0, \"y\": 0.0, \"switch_deck\": \"\", \"height\": 0.33333333333333331482961625624739, \"release_list\": [ ], \"functions\": 64.0, \"stretch\": 0.0 } ], \"deck_name\": \"Xrd x SAMMI\", \"grid_x\": 3.0, \"stretch\": 0.0 }", "unique_id": "20241119022034255051982", "include_image": { "RoboFaustBanner.png": "iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAYAAABccqhmAAAgAElEQVR4nOy9ebwdRZk3\/q3qPufcfb\/ZVwwhCdkTwISILIKCuCMqoI4O6MyoMy\/jjK\/I6IgyjPLKOOq4jAgKyiIiw6oCgoCBJITc7IQEQkL2Pbm5+zndVb8\/qpfq7urtLPce5uf3Q7jnnO6urq6u56mnnpUsueYqjhEGIQQgBAQchFIABAAHIH7j1i8AoGUzzmcA4CDWd+6cTTUNhFIQ60runCUelYCCg0HTdWi67mlfvrf7jUPPZKV7AAADQEEpAKs9+3oCDqrrnpbke+jZjPRN7pv8ZICWyTjHiUY9PXSfn4OCglBijR13zhL9yEi\/SX0h8oiEgwNghiH9Yo8IcfpmGgUA9r3d5zAZAzdZ4Mm4r7X80JDzltz3DufNO9dzjkK+YJ0jxpz4rgQAZnLY70d+Z5wzmAXD6T\/x\/eWm4emb6Ls8hxDoo1EoANztKxj3XUPAwcAMBnk2yOPHwcE5wJl8zvCAxp9SeXDuEk9Z2mNM+XugdV467+MhbYT1IbQdxW9moQAAoJrqNXmvYMwMnEE1TXkvQoZngpX7LsxMN6aiD24vTCM4RpHX0mjy4M6CVTrC5lGlURUMwEWZBiGmGUKIQxymZ3UrHsQ33dUMoIgJU8qQlInQi2UYSZ6Vcw5N14tqPzV4DAPxPWeS5+aMiesIBSG2JCAd5xycJXjvf2EAAnHjkGRlpRr1nEc8xzQQKv3CecRNudOe+wtXnaKEvOJQSp1JwFJIB8xMt2rFISkxywwtnpCLYxCMMec90QRMIM24BZCEwBRjk5RhE+ev2wZnbMQIOymqjgHEDRiLEeNksZdLE8x\/TEacFFCqmEf916eYyGlEQ0eXYv0rFY42Ibat9Pdiphl41ypJQKyg4j1quvr9ec5nzHl+Yl\/POViCcVQ9Z9izc849c9FZGAicdxBoK2QelZvJp0H1MYAEsF+q\/52q98piUoQRvw17v+1HqcSvlljKvwdXraAB5lGhvX\/YuIt7Bn+KmvA2kTvMO8Akwt8jZ+HPWwpD9CwqnIObpiX6e+\/BmVc+pBqt2JiXC286BhAgSEuEJzEEngQuY3EZTBzjiAK1thp+CYMmWMm8\/bKIOWIVU03wtIrIohExx6m1N7aRZLWLknr8Uo7ddoD4FRBWleLAGRd9942pI20x28Lk6y8VFhpYcwpW\/22M5OoPvAkZQORqUwKIVl5FlJ9RmYYBznnqtT+wsluMSaYRUpExSd9XP+zJTQgBpbRCkz16uxPQ2USgWE28SvnnPR6ytagC\/UD1MYAiRaa4lxd3POy25bISAAA3zUTKLhtxYqtYUCr1CtO9B4+ilPGiTHZuA0UQRjlE7SiJKcaC4LcCxcGWzsplRiwW1cMASuSGPGZ1iSKmyBUkpRhN4H2p\/pbTrDJJth\/csv+r+lnK9iXd2umOITNN6xmDV3usL8X2KkTUD2s7LWEWC3tbp+pdPDMcOT1B1TAAV+NcubbDULKiTyJqGjPJWRklikDbZd7zp30VXk17cNRLY0jWPRQOT2771nuU9Dgg0j49AsOmL1HcqxyMsVhUDQMAL59XlR8BM1y5YU38JJrmpKKxvFVIMzltJVmQkw7DJEugiKssCGzXYfeXhJaACuzHOeOuZFom02y5UT0MICGKUdTEWgjKYTO37M9xoLoWq7H26wniLADOdT5loOwHMRxzLwkDj1NYluwSG3O90tegDKs\/M03JOmF3RbENqjIm8KZjAFGOQLIJz5kIVTXgYoJwzkI14mEThIXufanEUMKuTTbBh2O\/HCeNlaQ8TKC1INRvRiRAiRKiss9VNe\/CUYUMIGbgCHHNYPLeW7HKc86hlWHfWS5oGe\/qo\/KGi5JW7Ikm5iz16BviVrEkC2s6tZ+6hXLqUyqB0FW5SG\/HYkyb1SQFVCEDiEZAzOU8Uokiv\/DQqTWC9ti0\/vCE0KImUBLC8koA6e4hwmytKymJvN5201Uiop+xpt4EOoiwiMAwBSXnwgGIaDRwTpL7qTDSpj8Z1dMTB+kHNUpslCdN9fBdLzjnyYm6gg9RugTgItTv3fAqxdIws7jVtliCtOFnwMx2+ZUgJDQiGPdI6zzLgCpkAOVFMd53gTYSTKyRNOUkQlwobClNhzBgPxMI1d\/YirMIhpBoa6Byh07J1EQiFxLJbIhGSwrTHk6TYxyqkAGUj5DsCWhPHvud+f+WQ2FTcVOjBZcQhnv5CR+jKCWjzRgT75UJUUoPYUzGHgfOuBWWH9HPJHEIpplsCpYwZ0Yq+YcK1cUAuPO\/9JfK8f9S7D3gegm6MdvpO1apl+Z4DiZsPy4culIoxYlHWD7SjZ94h1rgXaqQ1LEmbuWVGUScPiaJclnVj2oifqDaGEARkF1vozKvFBuI4rTHecmedoHwZUodE1RSW7\/UM29blc6qE8I1k4xJ8ZM+\/rrQnU3KFTr1\/IhSZMJadDgCTlnVJP4DVcYAkuy1uSmHwSG5DbfYSC\/\/PrbIFyjs9SaYaVomvGC\/Swk8qkTSjjA4zMpSXkYFJKUh\/qjnDzePhvhHpGAAYXEkUUyVmQXHzTh4LDhHkpkahx9VxQCSwE4gSml618q0u+ewfT1jzBu8ENOPNGafJCuEM8Ekz7M45lkOJSWlVEnQVItQ3FmnJ8r7F8EsVGHg8RGeJNa5KW68Q7c+Hn9j27lo5OP70+JNxwCA6ICbqEmR1kwURbh+012YKTKtzTduAoVlmYkKkgHK4HxiO1aGPI8\/yQlnwS1NlBtwkndDNc1J+S4u8l4TaIEIZm37Wtg+FDZTEKa8mPsqLBPcNIu25ZcjcU058aZjAHEDGBUWXOn9l594VZMkycRRMQFKaWwylPKuPj7CSBDwZK+WoSG7IVmLuBVCnDgBJyHKsXBat71EuSs5uDn34YjuSS039nMxObgHxTn0VJMXIFBtDCDOC9jOqmuy8ElWJg5b7IuydQRhkyMJE\/KfQzUtODaq7oWE45Zl0lltxKXriruXLClw3wocqVTzvW8nvZbzgxsL4utVeeojcFTUl2KkUFUMIPaFyNrUkIlYLg5btNmLl8nV03YPTpnuS+Xqmjy1dcTYJRjWpAo\/Ox1WGgUh9xGfrAcJS0BSVoQ8P6FWzkNm5f+vWn9TNaqKAUQml1RM4rSRY+FeZqmaka5TXFiG9081zVpwwvQKkWtlxbY69vMqHXXs1ZyQxLEZKiQRyz3xHUmftYSFITZtPCGuxyGtTm1\/GKqLAUQhbEzlCUCiJ0ToSlgEwTiT3DKH2ZMyURqvSG13aVsYm4A441Y69PK8YpV+Q5g2WcA06npgumK5m8Y9fisRd++49G8qlKP6UHhdCTNx4pG\/+AFEoYiVmMMyCVI3Si7pIEsbCs9vhJBIe3\/YKpUmqEe1X01K\/Mny4olzSouvLwFRugKrn3L2IvmzPA5Ris1SiclMwEj8KdzCdEz+mAPlYmO\/tyqSEKqKARSjxQ7Lsa+cHAFFmuVmSoib0cdN5wJmBkW\/6D1edBCJuGUwnNnPDIhEEOE+8F6EMqUSiMTuUSQzDFlZS92RkxCfA3EwDQHJjmMW44EkvRXTtyKkNM5YgElUA6qKAQBR7yT40mPTS1n2Xy7sPmCmCWaXjqI0mWLLND0rbtT+Vums4u9zxB7XNIygzZmr9\/Tyyl62CrVh2fRSEko5\/N294+C2J9caKKZPgrEiEROJYp5U00CTtKF6f1UUD1B9DMA\/WNZqyBkLJJ1MojByXrhzAy6tBAn75Li8JtOSh5m24v310wexlDO5hFe6KTYoS+hEonQPzGQJKwdHH0+jL1FJZmmDjIIdCCr8Am+wiohdhapiAPYK5MnX5jtux40nFQPL7XihtjVbxMPdc5zzrb9h0WOJmVCRe3lbUZfoHkUSvR3t53G2ge21KLXPS3OkUT1HKQywHGnKCcRzEoeUogN\/qo0fVBUDICDl14+oGiyTiOpPwc05UybvFI488Q8WWf1W0eckgUmlMMAko+T0IeRkEfikKevq2cfDO6Bw\/vEhyeNVUvMu3Iw5QCzJ0p4OfsnT7UzF+lIMqosBJAhYKYdWu9IBG\/7VOikRRm8xVIwssrUSV7iELi2JMvXEHA5lAgkZdcz4Rm6hSpQCotouh+mx0qgqBjBcUCuporX7aSHclVns6pNUFkmW5EKyRQesDQlvlALlZKT+50vTdjSDVSiP5S8R4xKrIzCrTJ4vAlXDADyDHZf9tQIreBqHmdShtUmKesSVDA+Z5GnrCyRHdJ8rIUURq4Jw2rbjnjUyqjMiijKOAZgKM7EfFU\/UUiKqhgHIKHeNuxGBRPRGgkQfpVT5TaYLKLr5sijLkiDMMcrejBTL1EqylJTISB3ntIiMTyOZJqwqGUAc0uTQS4K4CR6W8CJp29Ra2UpNWx2GgM6hbH4BalSKQSvDoDUt1jqRnIAsYkxxXdjcSKWL8jl5RR0fblQtA1CLgd6MsXIxilBEJQgpol+uaiwBU\/DnjeNMuX2J1P4nhGEYngSasodhORgC1TRnFUviAFMUQt6VpgkxuhQyUafuKn4bw0wzqZpU3Rfb03OE7YJVywAAH4dWRZkR4XgSVjcPUK9WlPqy18S578phyDHT0D6Tcx6eUsz2ZrNyA8an80ro8BSCSpjBhrO6DYe1EiuIhfMkliPbexBeH5IU4cuua7YpMgIRwMkJaH\/x35cxp2hoVNsjiepmAFJyDdVAeQgzIr0TsXz+qR3B5iNiEXo7vJw4kGw0qhBFiZOkuFXGp5WPyTMQ55ZdFkiE6zpk2SHKaiL05xFwm0o2psnrGdi8xfJctbMCI5pZ\/oUBAIgUpyNN476DXFrtJG9C\/2kEQaLgnCllTJUWt9QEFGGa4dDJlmCSFJN7Pxr+ikpJErCE9DNBlGRk1zkHs+IkIolJcSiSscf0qaxmziqKAJRRHQwgamxSzukwaUFuKizZRlxizWL75EGIuOj2QZEOLEmXQoKGKg15rMMy95pSPcBitOqpfAIoTVyNKMoLsVTiV0V9ViOqgwFEIFSsD7HFl8ppZW19eQNt4Ez+yC76Yw0SPo6madF6gArOP7cwC\/PEcRBC1FuHuMAqC5wH4\/HT9qmYc8qx8qeZOyNZLbg6GEBMokllEIhiAoU58zihoCm6JPLWlcfklbYoRFjAURi0jLulKJ8UkI6RFqNDccaFM3cOeDIsVX7VtPtgz6eiK0ipPA6p5ANQpagOBpAAsW61UatfWs8ymZHwaCtDGCghTk56P6JsyJ4tDOexUYCqLUJ5mMDwTFq5zLb\/WSpNN4FsPzHbM0Dob5L2y1nZq9ixrSoZgP0KwiY3ocTNMWetGOUSo5Tt8PR1AWUmElgBwjTTqsSnIUwk6hrlPUcIUToMpXecz7Iz3Ih1yYZa+gwzD1dbDkA\/qpABkKLWnjTx8sIcHKJDCGMkkiQQFwvg34pw2x7s3ESxfYnyVzdN5XKYNnx4JBC1LVMRh+05WT6ox6GUOoxJmIRz9yp5D2GoQgZQnAIuzN7rgRzDj6DvAKExL5azRN5fYcxFKBiZZ1UkSPastibdzplA4xJ9DLPZyb2dP6qPBaTqWIsFKTWUOQEi9U5FVPwJPqTIfJQoYUHq25UNVcgABIrR5odleSVRGnJpMiaK8isDXdkRb4RSkVYq8XUM8BVFDdNvlMPunHheytluLW87ZrpSjyhrprlbtyji9xBm8ZRRiuidhCEH9BVy3kJp25YsTfzIbROqlgEUA7t6LZc0yVEuuTISTZgkDjmx2wOpNFZK8dArenLn\/0EdgcojrggtfcLzWMIJHFbTr9ywLRJhxBerFE6yaDOutO4wyQPQRpotw3DjTckAKqVYCY1Ft01FCdqIMofZQS3O\/VLuQ0O97jh8WxlVT6tjLxonmcjVfIvJqJOovHqZrSSEWFafKD3UXzwBywcVkZW6Z5T3\/04Ah8phpUg6CmQnrgC8\/gN+y0Nl7+25VYxCNtRTU6UU1HVvrmLG1O8FIcy3AoRXjDQVKo2MsJXgTckAgHTx2EleV+J5kuA8lS4itKJM6ipGxSJ+FMpV2DKOQGTHJfeiCK9PXQfRtMBY2XEeIg5C2RE4ZcBLdPSRoZLckswxTwyIbQL9SzBQkeAiRTihxFEuhSFuiJNKD5HVajx987UfIcomZWRRdy0ln165kXhbI0lYohRbVJ8TMC9pDJxcCHCZmu1RShJu5dIiaZvCkag6tmNAFTOAJIMUrKJj\/8\/XVlQbFTI32Wa7imeGTbiCVMrf3KmHSKLrKcooZg+exM8j6hllphhpFYrrR4nEq0xt\/v\/7WIAiEEW4nNurgLX62m7EAaez5JOgGOeUcuYY0HTNN3ksf4kInwMZlQpHlfsUVvzEj2JSuyez0lh\/\/AsDgh6HUVGjJfcjAqrgqJHEm5YBpDEn2a+ecVfDDCTnvJT6JY1khF0uBQ+hVOQwsDwKBWOJjo0HpCCoolaYBNF6Za7UU1xfiPIsmbjDiK6Yvoa9e1ZFYn0aVCEDcL30KonE7Q+DkiZOJPZLH8KZJokuIlpKKAVh4zdcGYSTIEmSFFV\/mWmGhyyHMYDEUk11MYoqZAAJ9v4VnmRhK0nUbyro2UxkqjIbUY4ptljtbyHOe4xY7rSElN8fPW61S103Ie5+hpGoTeWQJOmK7RrOuXrrJCkrxXmSydXeaiaVSKvMH6AKGUD8AFXam8yz0y5SEvEwCc5jQ0JDSarI+eKubKT8gUFxDI0j0lafJsuRbFWI3\/Ko8kbEb5PsZC1J3rWezYYfjHhXtgt0eQOdSkd19WaYEEdT\/uPF5APw27pDDBQOzEIh2A+J0an6HLZ1UFkehjvpqQPbXZYQTx9EbIDruh3MBRBcjUVz\/ilruUSHiuAcVOV3ADsXQfnGJWmhU39W6pHEm44BpFXcqCYRByorioUGHrFUq7E3HbmqOcWkD51cw8MAzAgtt18i8H+nmub8C91TK4Y2zu+BgAS2jZUqbqKanwHmW0W7gKpmAB7bra\/oRVKMxMqnh6w4QHTfTcNwy44ksKs7ufKl\/ajfYlE8wisgRIuxEQ5ZtsOW\/K8IyPdPqnyTrylFwRx3bcAEGXJ+pfVYSVHVDAAQnDqQYbXIEuGOVxjiFHmVZdFhTMmfnw48fIJXPsIsxmNOMX5xDKtc4rbtfJTWuqFlMhWzLqlGq5o8\/sJQhQyg\/EEsbikm97NYiUpv249kCkp1THyY16CQhAgAb0ITZcvOpCtf9ICKYSkVfDETXsXMRtILLi1s7b9qbJXyUhwDqAKLQNWPPqVEhOnazjvE8v1nLFI5t\/y\/f4UjO3bFuIeG+K0TeEVrWJKIver4zEDe\/qZwUJK96DKZ6JOj6d5BsWm0gSihf\/hRnO9CknwNxU15xrhTSlzTg23YEsBIxmEUg6pnAA4csc\/3s4IJvPrcCuQHBrDhocdjC28yw3BsubC00QEijks6KiUfScXVbQZQhDhbFUjR5zDGFJqbMUHbQYkjnoGpIhFtE51dPi5w3DQDTgYiTNmrpJWlukRbjSrYIrx5GADCJ4XtGgsAB7dux+6ujWhobwMArH\/48dh2\/TnolRr3hJzdUJjzwkDsMNU3I\/Ej+D6SxgIE2lH8FhndWUJor8yknfRkCinOZviRNRtlSYDb6c3fXO+y6hlAWr\/7zb9\/GgBw3uf+CgBw8JXXnHPCXo2Tv60MkXtJrQ5UjkjzJPJIeiP1zyOtXVY53sQmCFGtunHORkVuV5zkqiTeQSppjD\/x+DgknK9VslX4X8MAAGD1XQ8AAKYtOxNaJoNzPnMVAOCJm38k2oq4tpyEw6Utgar\/Sv\/zEvbuMsJF5+FZmcLqA0YhaeWnNMfjkER6SKrPIZQMT3XkCqD6ey0njYhcSTh6Dh8BAMx+53kAONomjnOIbdPvnoq8Da2gGC4zgyhGo9o+EIgV0lZ6in2qV3KwdzCOX4ACSXzpy5UqI07v4oeqx2nbSH6zyuy7CSHQ9GR5Bvzm0pE0F1Y9A\/BwYSJVBPLh2R\/cDgA497Mfhzyl3vv1LwIA9m16BaxgVHywnVqGqpU\/gQuozASIyDaZ8M4jr1DyQHZOilgdw1biSpkHNV2rrPhNCIAYPwX\/3PgLA0gGf3yNPXD9J7odwm6dMNaymLv\/3vPV\/wMA+ON3fwozn1f63cfeO2nuAM31Vgwwm6TELCkG08yN0Jx6CaWbSpoBw8JuoxDl81C8h2c6KSfJe7cLvthmac9rkJ27CKk6M+GwMwDOGI69sSf1daFJNTnHqjt\/AwD4wDe+BJfsnSuhZ3OYtvQMAMDT37sNQ339qT3CkkyEgCMPdx1+km4xlPUQE3KBUE+8pGnDQoijXOG9siSQihD8+QNNU2ynhsGJKFHkovR6Yl2Fq8QF2MaISABbn3gGGx54LPH5US\/62R\/cBgA47dylFt17TXr29zkXn+dsJ5b\/7O5AbbhipIKk4IwlfvGh6aNjeQBxth\/FpNwqBsWlx6aJiD9p7b70JeQqK27HtV9t\/h4jtgXoO3ocK279FY7v2ht9omcv5Q7u\/s1b8YxF\/J2nTMKcd77dUhzJrrDewX7fDf8sWmEMT\/\/nz5yX5egZQvbuSTS8w1HxBoByq29nRnZO4czxnixl9Y69sghiKkc6NT8zTcoEbMajRcX0K28YnEv+NlM1V0Xuz9rERXO\/Ppw3ZIaBves2Y9K809F98DCObN+JPV0bQShB89jR1llOTJxF1K7jxsu\/expbHv8Tju7YBQBYfNmlmH\/pO5z2KdWgZ3Roug5N16DpuijjZLUy8\/xlePX51WCmie0vvIRxp5+GbG2NFTJKrbNcmy6BIG7i21bAm3TaYQD+s+TPghjlkCT7GHH6Lou2xNeOpmveNikVxB840xoLyddAdYZ\/ShNPn3xP6xCk1JLHL957hZN30Xla8TcsXNjfS1dR5x8twM0twL1pvx3e4r4f+zvztUc13bpH8H24rRDLPOuNIwERbuTcVxNRdg33vxP5u+w3IE73xxcMn5RAllxz1bCqIHsPHcHGh\/6Aj9z8LwAheOCrN6MwOBTsGCWgmi5EQcWqUd\/Wgov\/+W\/hHyx1tleRQ88sGNAyGWTravDKMy9gzQO\/AwDUtTTjvM9\/ym4B7gsRE4xmNBBQeKULBoCCWOdqOpWucs9yO0YsN1TiXGP1TNzDYj4OwdqJQO0zCbEYkbdNlwEE7041KiwPxD3ifwqPvgrEUQTax+xWXZGcOL0WvvF+YhNWGrEN4dZ\/3GnbyAe3WuJqbrFb8c3M58GdI96x5ACYwcDBnHYJ7MQt9lMy52k5txmY9x7MKAjTqud39x7cMKU+2GeI\/4t56Y4cBweYdS\/OpLG0r5W+M9NhYIBdE0GWcv8XM4A9XRuwe80GXP7tf4GWdZVmu9dvxvN33B8pIlJNw7u\/\/AXUNNSF2o4zNTXIDwxKv4ozaxrq4R1kwbF\/+bmvOGe+60t\/By2bQyUYAIfIEahiAJompBVCKfqOHcfTP7oDJw4cwhXf\/YbDCOTwX+K0KKSWMAZAwKFlsokZgIxSGIBpMOezTACMmTAL6qo65WAAHDahexmAqxPx3oOAo5AvKBmAyM3gJ+IEDMD+ifFQBsCMgmfcRpIBVLhqRRBaxt1\/EdiiLsfkebMx+T9mO0eA8MnJGYORzzvf9VwWmZoa53tNQz3AOfIDg6CaBj3n3\/O5YuMnfvQtPHjDd3Dy4BH84eYfgRCCS77yD8PyDrYtX4V1jzwZ2O9+4IZ\/Rk1jA2ClxcrmsgqmMnyTpFyglKLSRjDhNOV+d0OpQ\/qkaYKRScScSAHpN+UzBs8WilInetA9SQoYqxK3jWFnAE5+NsmOy1NOZkIp9FwOei4brlUlBNm6Wu9P0meZoD7wr\/+Ewd4+\/PpL3wTnHI\/9238ChODcv\/0kGtpaE\/XJNMzIJB0n9h3EuoefwPE9+yKlnI\/+v69FFz2BzB7F3tZfdXgkEWuBiBI7ygQRLp5MQcelMHPAGlVKUvkZ+Inf0w9OHHMwD1ndBbMYGY4w7DNnqLcPgGAEpaxhmZocgOBc8gr53t\/858m\/1zbU44pbvo7Bnl488PXvAJzjmR\/9AoCI1Z9zyQWYtGC2N0+fle338I7dOL5vP468\/gZ6jhzDUG9frLZby+g49+qrMO706SAguPPz14k9fZXZidMibJLb0DMZpR4g1T2SWBJI8ZyGahrMCCuEk9mYc5gJKyF7ehKSVGQkMOwMoPfgYQBAJpcFM8xYQlVBzrkXVPcFofpNNT2ytWIbccUtXwfnHE9871Yc3b0PZqGAdQ\/9Aese+kPCHnpR39qMWRe8DbPOPRta1k38QShFYXAQuzdsBgCc8aF3F9U+Zxwx2a+HDbaGIwzMZFbSzxKKgZYxtVjqayxloq1YoboGJuk1VPOKEFe5OtLlwP0YdgbQd+y4+EBIeuK3TTERdtRi+ap9Xba2xpkY77nuC86RnV0bseHxP6H3yDHHmpBrqEPb+LGYMGcGxs86DXUtzcLUp\/RS456\/QjtPkMllsfq3winqLUsWBztm6QGYaSWs0NxS1\/I51bKiEErATQVhce4pmx7FBOK3EeXZR0Q55RBKPdtUWNp97zjbFpt0W4ZqwrAzAMMy+REAGqU+DagN74SmGkXGUeQV60+tYjfqDYR3Xoi+TFk4B1MWzgEhBHpObD9sl9TAfSImKCGyvwFANA1Dff3OMRnMNJEfGMSAYYBQiprGBlBN7cTiVOkdYdgluAHvQq16Z0IB58vNbzG8qCeRV9QwlOQNyd33ZBgFsYdXaqrE3KCaBoMVQqUfZjJL8Vd9TGJEtUdEI8JaEzBhid8IpchK2n0bWiajdN1VTQqlSOac6b5STdMcO30yqKLckr5g7z38ykPOGApDeQyd7EHv8W5oGkVDR7tgHKHBMcznschDzw3vlZew0k7XQCwCEaoxsxBO0IRSwDA899V0vbTchowXTW\/Fiug0RJHniTwsk+RSTkQzAA5se\/rP6N69F+AAA8eMi85D8\/gxJd84U5PziNGSKfsAACAASURBVMkE4sUxxpygGjvKyj2JWMc4qCZWYWOoALskVOgkU3wjAAih0HOZiCuBCGNkxDXxvZB\/X\/Cei7Dyngex5U\/P45QzF2Corx8D3T0Y6O4GYxytY0ehtqkBekzGIiEFuN\/LWaiTEOqMc1iik5HcmzvXMiY070nvYzEp11nIC0JpojT0RNPAmZdpMdNnGrTOC01GOwIInVEbH3gMq196DtrXvhI4dv99D+Cn9\/8Pxs6ZWdRNvYk3ZdspgSYxBapRQLnKuhNEzyURYsLsAH6kmXilitvu9XMufDtW3vMg1j3yBJrHdGKotx\/5wUGAMTR2tKG+vVVYPTwruuL+jAOaNJ4lbgk8bkUaBTdcBlBOnQO1iEIwFrHPppoGM4JQvK6\/EhK+Qs654wpsNZi22x4ww3CYCcAjmYa\/71WXEKTnxXXoWvs8NE34ph84cAB79+yFYYlll13+QTxx3y+x8cF0WnH7QdsnjUfQEMcV\/8JAUv5TXa+6b7QUUe5\/8n0nWsz0udvuwUBPL8x8AVTXUdfagpr6+tQBJHpcmvEiUZGSWtag+wmBhCRQsc+zs0Q7Pvq+lT+KASr1SGXUoUQFkAXeZTUxgK2PPoEHHrnP+W4aJvbt3YeDBw9iw\/oN6FrT5Whzu9Y85wTlJEHP\/kMAgOnLzkRyYg8n4dIJT7FnC+mDij2F\/UsG7unTxdd+xkn9teWpP8O2ENQ01HvSY8VP0fJNYpU5K\/W2wrctCT0tpeNNKIjNGEgo0wxNUV5szQBlgFN53gNn6iKp5YJHfjYLBaxc9QwAYPcbuzFx8kToGR1bNr2CmbNnOOetX7ceCxYuACEE3\/nna\/Hv9\/820c0ObRMZek9dstizM4rT6KaR9JIMe9w5pfLjYq+\/5me34Kefvhb5gUGsf\/RJLPvE5dCzWcEYAjfheOGu3+K1VV2e7EggBC1jRuHDN\/7f4h9ANAT5SfyVfZVVfqyUbTbEHlj0yUmVlgJcaSFKB39f45SLsnmyVNHcLiKTFsww0LDvMH586w88v\/\/81jvw6Ib1aBjVUVK\/ZHgYwDQmOODePXtx+MhhtLa3oqGhAVd+8grcdcfdXiawfj3mz5+PGTNPg1koxFe2AXBi934AQNby4hPwm1fiGUIUir0ybHddOcOauuXP3v6fuPWaL4KZJpbfKSQxTdfRMWUiCkNDOLZnf6jI2DZhLN7\/1WsBiGAWT+rx1PDeQ0S4uaAKZZasMAsrAxbOBLx6hbKW7dY0MMaUgUjKnjBm9cZSGPsYW\/L7UjAj+LxRJsptTz6HFc+JWhb9\/f04euQostksOkd14lPXfBKfAnDmonMw8\/3vSt0fFTwM4Os3fhUAcPDgQdGZrduclf7yKz6Mp5\/8EzpHdwQe4uj2nRg149TYmxUGRZRemGcerKOVJ8AQU1qKLUHpCG\/56lu\/g3z\/AO74wvXgXESeHXxth+ccz6QkBJ\/+ybcRWLVNE9BKrzoUNvn9q6udy8AsRBTTiGQC0j2L0DVERpJSCjPGTTkMhFKgCL8Clf2fyZ6EPmx6+HGsWf0sBgYGsOXlLZ5je\/fuxcRJE9HZ2YkX1zyH+fOWYN5l70ndJz9cBhAyeGu71mLhooXIZDLIhKzytiNLUlDFw4et+pUhQHWrxlAe+7a+hhX3PoieI8dC9nbCWtE6biwu+cfPoK6luSI9zNbV4prb\/sP5zgzTyvwjpLSf\/vU\/WufV4arv3oCwZ+LMBKGluXtEZuchooy5h2nHecZZfMpOoMFhmdFs6cHXXlKEWgZSIDRhCaHwlweLgt\/+7zgJhbRhFgpYs\/pZ5PP5APEDwLGjxzFv\/jxsf207OkeNwrp1K\/DxG75Zsqk30czoWtOFhYsW4vwLz8Pdd96DGaef5hzr7e1Fy8TxqW5aDUUoh\/oH8PR\/\/xJ7Nm91JnhjvYbrPz8JN\/50Ik6ZeCqyWbVSyDA5Nr7Sh89cdzO2bBfMr7GjDR\/99+utF1L+57MVgRzAkz\/8hWDYhOBj3\/kqGOPh3tEVHuqwwicmixa3nWKv1ndi+XiYluddUaBAWLwx51wEIsVtA0IIVLg4R13osiy\/\/T8WhODl+x8FvvGv2LRxU+AwYwynTp+Gvt4+dHd3o6OzA3fdeTfW3fMgFl71oeT3UUCKqiGOO2lbexuOHT3mOdFmAld84mMeJvDQA4+gMYFSwmsCLA\/CBzk4gYyCgSd\/+HPs2vAyAKCzLYMf33gqLvs7huPrzkYmk\/yF6RrBgtMbsPrhhc5vW17rx5nv\/yI4B678jxtQ19KU6lnSYMea9QCAv\/rhvwtmqrDL23XvuOXGSikVMRTldhcOIVZN12CErKZRe2C1gjGZ6C5vgDi3M\/1IW0opzTgBCfSdMwZKNcs93deDEImGM0vMt+4Ty7sIhZ+TEEJw929\/FXrJsSPHsHDRQqxbuw4A8Pr21wEAY0ePirlZPDwSwOIFy7Bm3fOYMmVKgAEALhP46FUfAWMMhw4ewqMPPYbs\/FmxN3pj5RoAwLIrP1j0vt4\/tjxGljiycw8evfm\/UBgcQi5Lccd3TsOlFyzznHN8\/dlonfc8ejcvC2klGWZOq0PPpmXIFzg6F34dRM9Y+\/JopF3rbv+MSGx66Ze\/4G2HiwloMhNmvgBjaAj5\/kGYhQL0XA41DfXINdQrq+NWBCGMJrYWQKn35a6EGZgvfj8DKdmn47hDLAnG388wyvYx39iSZiGSxPTTTg3eE8Arm7fiik98DF1rugLP0WoVwC0Fntkw+0PvRj6fRzabxYKFC7C2a23ggo0bNmLO3Dno6+3Dk3\/4I8ypExLdaP+mVwAAo049BeV2JbF5OucMm558Dit+\/RDAOebOqMeuZxeisSF8n5TRCXb++Sw0nL68ZCYAANkMQffGs\/H4c8fwoU9fi098\/0YrHVlU3+PBIfLN2dlq2sePFSnAOQMYg2nkwQwTQ\/39GOzpxWDvAFihAD2bQX17m+hD5UwaSugZ3dG8O8RXlHg\/zB2HFagkKzh9ymmnsnCZwDkP1CLcsukVXPnJKzzEDwAH9h8AAOx4fQdmLJhVkpI3sBxc9eWv4p7\/dxM0TcPCRQtRKBSwa9cumIaJ8RPGo76+Ho8+9Bi6T3TjB7fdidMuPCfVDaO6WszUKAwO4d4v34jBk72gBPjMFePwxMazU0m6HW0Z3HDtFHQufAGHu5YW0Ysg3nlOG3o2LUPj7H\/BWZe\/F3PfdV6JLRI8fNP3AADnf\/bj6D50BCBif8jyBgqDA8gP5lEYHISRL4BqFHXNjWjq7EB9eyuytTWJi12WC6ZhuffCfe+U0uhkGyUoLcKUtkmgSuEV5o7MWRHVnGOwetVLeOvSs5zvWzariR8A9u7Zj7raWnR3n8TA8W7UtbUUfV9lUlCzYIBveQ3X\/+uXMW78OPT29qLrpbXoOdkDABgcHMR9zz6HMTOnJ7rJ7q4N2LNmA5Z+7AOYnZJhAAqPNAAv3PMgNj35LLIZgi1\/PAOjO1LmelegcfZyrHl4EaafUht\/cgq0zl2O2vYOfORbwbiKaHi52K2fFjb+t370\/U66dMYZuMnADMPKGUCQq69FY2cHWjrbUdva4hSt5EiXFdhJpWm6BjQ5qSZgJdzksshtHWMcppX91r+DZ1IIMJGuY4xbSjiRjjssKahpmiCgEElBLQ9M022TO72n1jfRBufM0vLbVn5flmCJ2O0zTCuBp32maTLFyu8eB0hIQlHiSHHcNKQnF7+\/+PN78fJr6zE0NIQ\/PfUM3nHRBdiwfgP8ePrJZzB27BhwznHHY39AbWsTWlMq4T09j8oK3HPoCHY8vxpDJ7rR3NwEAxz148di8lkLwy5RYsWtQsFxze3fLbqjNn7xuetQGBjE3101Djdfd0rJ7flRrq2AH3Mvfgm7DjB86iffUhy19qGcAxxSMQ8\/AxA1Dhe9z3UCEZNLZMElmo7axjq0jhuDxlGdqG2oE\/70xJ1u5WQAzDeRAUi\/iV\/trE8e8RlwFJT21aq2XOKLZwDy6l8sAxAMzXT7GJIWPBiK7mUAjJkAA1QMQDA3b1ZgbjHS9888HR\/88PsBCG9bv07gyT\/8ERMmiC33N\/71JkxZsghNY0aXJAFEaoQaR3Vg7gcuLrpxwFX6CPt1ErFJLbuvsFb8XJZWhEBtfPHqCTjn8nV47r75ZW331W\/ruOimQdz5hX\/Bx79\/IxgzrRBbgBXyymsyNTXgTEzaWOUZ1VDTUI\/WcaPRNKoTtY0NFd06l7r\/FV6D4pnCKwRrie5jE39xbj5hbRrpTHklwLa+\/fCeX2Ogvx+ZTAYzT5+J2oZavPLyVuzdsxcNjY0O8X\/TIn4AqGstzQ+l4pvCVbffAwD4qx\/epDgaFbIj\/p04cBi3fvpadJxch9NPrcOKBxZUtL83XDsFXZt7y9pm\/YrlGJg7H7+7ZQJObenH\/dd\/S6wQJgOLqEk42NuHof5+GPl8NAMgQKY2h+ZRHWjoaEOmJltec5+iraR74KjSZLHKK87cwB65RJyVj8BfKj7uiZMoy4imhToDSQ3FtpMK1kNMWDAHP\/vtg3h58xZsWLcBq1e+hJ6TPWhqagIlBCdOdOPm73wfky3iL0dfKmoTkieJlss5679pGDCVmWHFw2hWaa\/brv5H5LIEJzctAyVCPJ8+tbz7cxWe\/NVcTFm2CjuXnxV\/cgL0LRESS3bXTmy8ASBXH8JD\/\/ZdvOcr\/ydSJnKF8WhQTUNdUyMa2ltFfQTLO49Sl2BKmSiUUo84Gpdr33+t2q7upuNWKeB4mFSgeA6iJUvaEQcnBiDG91\/Ttci4AlGKLprx2UlL\/PcZN3cGVmzfjmfWb8Cx7TtBOTBUKKBl4jg0jR2FMbNdJ7wxs05DqagoA1h5290AgKu++w1nx5PvH4C7wqvx2Lf\/C4defwM7\/nwWOtsqE9cehSULmnDkeKFUuvGgfsVy8EwGxDDAf8ZBrt4nlEUKzbwcFyFj6uJ52PHSegz29IrCIRb0XBZ1LU3I1tU5acqYaYKW6AIsg1oZgaJE8rBcAZqueffovvMIpaAUTkUhNydg8sEXVYeLZwJyn6iuwSxUJnuv7G8g\/njdl\/VcDh1vmYoj23dg7PzTQ9spB\/EDFdwCMNN0RJtCoYCTR46h54jtXMSV\/w69vhN3fv46XHmuid7NyzzE39NnoqV5+FIY3vXdGTj\/ivVFX08k0b5+xXL0LVkmfrPGZEoHcM8Xb\/BeA3fKCzHUux06++MfBgBsfnq5ew2lyOZyyDXUg+qaM5m0mPRhqUHVK5YHEcdEfEA0A6G6XlrsexIRnwTXZlWfaMz4hW0n4rdGKmckL\/RcFmNmnYb69jbPM2mZLEadNq1sxA9UUAKw9\/6X3eQ1fQ31DwQq9gDAff\/3RphDA6EKvrsfOoSPvad018ekeN9FHbjy2leKvp5bgVNkcBA8EzRRbr0RyP2Ntyiq48bqRIz5IM2V\/u6TqGtuElmKa3IibwAhwoxG7AKp5bVVO\/76ppG66eJW53RqvdCU5HYfnEq\/IjiHRPTLNptGteOcw91eRjGwtIrTxtGdaBzdmeqatKiIBHBizz4A4oVoinJZ+f4BFIbc9OC\/\/PxXcNWlzTix\/uzQNn\/96CFc++lkXoflwimTarF1e7pIRxn1K5YD4OhffKb12UVhmXA4KgwOBcxKURPlqu99EwCw5ZkXAEt7rOm6JyrMjn932inDPkbuk1ZMBNowpL3ijFv0TTwrPec8PAtQ1NhIsQOOmVPRjvAoJkrpwtvBsDEYfk9HGxVhAFt+\/zQA4PJv\/UvoOdxkyPcP4M7PfwUP3zob3\/vaWyLb7NrUizGdpTv7pMHqBxfgrR8MukOHoXa9e64t9vOa2gDxA0D9yhcACMJiJkNhcAjMMFAYHFIwAGmrRIBLvvR3AIA1Dz+OUadOtcROMbn8iVlsxVa5YYvIwiWWW6m41bqdWK26jCKZlTJYxyLKqFU5LA2YXCDUzj0YVwYMQGQuwGpE2Xu7+g6RxWbGufEutb\/+0jfR9eginL803pHBMCNCXiuEXI6iYCQnn4F5wkSZ2bMLZmMTwHmA+PsXn+l8XrqwSdKLAP3dPRjq68NATy\/6u09iaGAQdsCT\/K91wli87a8\/CgB47Fv\/hT\/+8Hb0HD0OLROSRLPEnHKhEomT8op7fiLEFrBjrlcgWGuhhP4lhaIgiwpJYu9pSCJT1X1cVF46CkNZSarv2HGnbPfcS863Jm9wAnMI4n\/67nnDYtaLA+33ifnShKrLAgND4rtMzP7P9vf6FcuR3b0LxthxqF\/5fOBedS+9CK7r6FuyDHObTooEoODWNsA7Ecx83qoP0BPQsI+edgo+8A0RGcg5xyM3fR+3XfNPuP1vvoSdazemHoNi4DIWxcSWRPGy3c+uGkSp024i4o\/pgxwjwQwjVFRPlNw0qhvDvYIlQFmVgBusGncf\/vb1viPeYbn\/yzfhxn+aijPnNZbz9kWD1dUBAOjAAFhtLUAp9IMHYIweg\/+68TR86R9W4gc\/WYq+JctQt3oliGGIzy+uBDENx85fv2I5zKZmDJ4+Ryn228hPOQVadzf+sEXDEeMNGAVTqpgrO+o6u1gM9vRZv4rfqEah6Touu+k6mCbDUz+4HScPHQY3GZ760R3OvTqnTMJ7r\/\/7aiofGAphObIj8czgMQmEEFCi9jHwQ9N1ZSUpX4Px55QDlAIJ+jxciIwFSIOVt90NzhhmnLsUcy85324+cN5TP\/w5JjeewHO\/Tudq2zh7OXo2ldcFmAwNAiDgVq2\/mpc3YnDWHJBCAXUvrULfkmUo7DuECe\/eht4fleeefUuWCc\/A+QvRdvY60NoGvPPazzpmtqTup\/bKp3p5B7e9jq4Hfx9I1fbhf7sObWNHpY4FgJMk040F4BwwC3m40QVOWA7s925\/MjkHkxy\/vPcU9+GmYS288vWiwIbpqxUozhCxAMzy13fr8tkRD24sABz\/fa\/vv+2lz5lp+fjnfffw+\/ELq4GcrVh+cidWwCiAcHUwEKz7MWaNFePO7\/C0ODwoiwTQvWe\/MyHnXnJB6Hm9R47h2K49eKMIQqYRLqWRYMypJmwr5lSfQSn6zlrqrNw2oQJAn9pVPzXsNgujx4LV1mEozzBx5kRnsgHJd4NR542aNsVD\/G0TxuG9130BmdpgncVEUBTaS6NXiNsGcKfIavA8ZXKOIkB13QrC8ULOP5gkYanKazGAmJcokowaAHjRGYfLhbIwgJd\/\/xQA4APf\/JJIR23V77NfqC1a\/e7mHxYdyFMs\/cuaw74ly1C\/6gWAMfF55fMA5+g7cwlqN6x1CN5sbnE+C+lgSNVyKtjEP3TKNBijRW1FzoHp57zVOqO4QCn5KmaaeOQbbiLRi6\/9DMbPnA5Okq0pYbH4qklargpBcmhwJaFiQuIZ3N9FLsMYBlAFFZjLiZIZgB3qu\/TjlwGAU8veLudtE\/\/vb\/4hbrl+WtH3YQkqx+gH9sMYMxZAcIUfnDUb2R2vOwo+jxLvxRWedrTuE85nMpSc+PvPWoK6VaItjwSxZBlqNm1A\/+KzHAche87Xt7cKUZdxS0mknmBR044ZBh75phtqPev8ZRg381TkGurRf7IH2bpaaLpekmCZNiuuDG6aouKvzxOQMeZRuFYadnQhAWAWmXn4fxtKYgCvPP4nAEIhNXq6HJvPURgacrSe3GQY6O7BZ6+YV\/S9ouhfP3oERnsHjDFjUfPyJmjdJ4SS7qUXQQp5DzGCEHBKQVKJsMHfCuPGI7NvLwBgcMYs5F7bhrpVK1AYMw75qaeI1X76DBjtHYIBzTzdIX5A6DSs1j0PqY6e84nf0mA8cctPMGAlaqltasTp73gbAJHLYbCnB7VNjahvbUFdSzOytTXIZDNuLb00ILbXnNjphonUfsiediKtuYi2s92Ch5MIuRVdaH1TnpO0bkHETYq\/dgRQNAMYPNmL47sEAbz36\/8sKWBc2EP90A3fwZ4Vb0UpiBpXs6UVAEB7e0F7ezwEb3SO8mrkOU9F\/ADQ3gD0DAKN0hbaJn4AyL32KohhwBgzFmZbm0f6yO7c4Xy2n8Mm\/npfIgcOK5IswlrEGXMCa+RV\/\/QL3obaZteqYpomWG8\/CgND6O\/uQV3jCdQ0N6CuoR6Zulro2awoN65RUCVD8KkIVX42mhbtemuaSqWmpmswCsNLKKbfg0+h1wBKZwBpS3+P5P4fKNYPgHOs\/fWDAID33fBPksHK6wnGDMNJVdXSVB6Lo8r+zjUNdS+uQO3GdRiYv8hzjn74UGR7+UlTnM8yocqfP\/fpydi81\/3dPmZ\/JkYB\/YvPwtDUt0A7dtRzbX7KVABirp12\/ovSyg+84+8\/A\/+YqSjNTgpiFgyYhon8wKCH+Be+952obVKbVJnlcdlz5CiO7tqLg9t34uBrO3F01x70HDmKwsAgWII62yrnmKj9cLUvhMXmR2SMie1QCKr9uf0oiipX\/OwuAMAZH3mfNZCu6Uh+flH4hRevwFMgVIsP7747DjybBcnnkd21E2ZLC+jAAOpXLEf\/ojPBs1nUr1iO\/OSpKIwbj0t3Lsfn7yF46uGzPffSjh1FzdYtyj4Bwnvxu7ftwQ3feyNwfz2XBYh\/tlhylJVHTxXjnu8fwBO3\/MT5vvC9F1nud4pntP5PCBXJQ4fyIgkJB\/RsJiaGPvA2lWdpuhZcXZHMQYdQWgYdQHzQk6ovnNnbAVcS4IwJvYTl0y9Cdd22uZ0HgcBhAnLbtrnyzcQDUjMAW+nXNmEcxs8+LUTod33QT+w\/iMsvLT2iqa6GYijPkcsSx2xHBwdQu3aNc05S4geAgdPnoG7tGoBSDJ42C\/WrXsDQ1LeAZ7OOlcDG5Pcvweb\/eBGAVzIw29o933vfugzLV3fjkk9tjF0JLvnKPyi2Tdb4cXgcXBwTIede4n\/PRQCSuc9SXUe2tgZ1TY2oa21GXXMjcrU1oLoe6qGWdDILsdk9M0nkH6UEZsT2wYYo1qEWyxkTSVDBSUKqI1YWIa\/2344OVFk2bCYhUoQpWqRSobuExUerCakYgE38hFIsu\/oKK\/I06MBiZz8FCF66\/1Gsuqt47T8gCPvvPj4BP\/7lPlw\/awcAeGz2KvQvPgt1L60S5\/o08nabqs9a9wmYzd69eUanGBwKisAnug18\/469uOVnu5FGrXDp166VvslkZjmK+Gzi9tFHv+ma+BZcemEi2yilFNnaGtS3taK+rQUNzU3I1NVA09xMwaVCrgXoKgpj+qVpMApqopLBQ7KyeIjVCtaJrN4Dd1GqFEpWII4AEjMAh\/gJwXu\/9kXxozRRZRuyaZjOO+s\/dgKTJ8jlwNOhZvNG9C1Zhq8s5hiz6Hlc\/99A\/8IzYld7m\/jzk6Z4iL\/upVUghYKS+HOvv4ahU4LManCIwTCBMWeuQG+fS+m6TnHa5E5QquFtY5sAEDyzJ1hRSca7\/u\/nYusHqhRDv\/\/W953PUxbOdQJTRGkwBGiOANAzGdQ0NaKxsw1NnR3I1tcio2ngFbBlU41aW4HyebLJBC0Tl\/iryKQkMSK5NBjVNBhl7pvVQ097WkaHMRTvNVYuH4pyIBEDsIm\/pqkRF\/3j33h3hiaDmc\/DrVEHgFDomYwzNmm8+PwrM6tvQGb3LtTv2YW8RXt1Xas915jNLY7tXrXaaye7MThTpFfqX+zN8yeL8EOnTMOhowV89ivb8PSKE46IqmsU0ye3obO1Hs+v2+2cf9bcqQAICoWDUNc89uLSr13rEC6zxs0G0TRoGV2pWNu7aYuTQ1HL6GifOM5z3M4qa4NSikxtDg1trWjq7BDifl1tSsL3MiGq6ZEabkJiKgIXA+6aHW1pJc4fhFAKZgY3V1TTwIzKE16SEeApcipWGrEMwNnzTxqPZZ\/+GPyPWFA5ynCGQiGPTDZd\/H72jR3elfmsJQDVHIIe1wK8vA+Y5Z3\/ocRf88rL0I4fc9rMHNiHwhj3YsaAH\/9qH77+vZ0YGBSToyarYfqkViybNx4c1PIdJ+AgeGnzHs99GXQ49g\/u1+a70HNZXHzd3wMEMPIFpUadWw5Uto3d3pcTAGsf+J1z3rxL3hG8gfRKNF1DTUMDmkZ1oLGzDTk7T2Cpq37I5XYuAg57BS7tNlEohb0MlwefKG4aWqJ4WPqQBpEMwCb+9qmTsPSTlwdeQGT+Ns5T53fLTxYmM1vJV\/\/iSs+g7fw2kPsswH4WvHZo+gzUr3wBhbHjHdPb4Axv0dLCmHHY8EofLvr4BvT2C43t+M56nDFjtOOFJwRHCuZ8tgmbYOHpU\/BC16vuIzoMQgSnqGboog+\/By3jx6D\/RDcAIFMTtR3iImOynXIKwNM\/uM05Ovfi89SXEUGImaxIDtoydhQa2tqg5zKWtjrZxJODXmLhJCHxEpYQ1ZM1kRZllzBKhsI1206M4nRVSMZyz0UZ9OqICFQygJMHDmHzI08AANomT8DST15uHfHZhkPSLAFiIPL9AyCEIF9gyGZoZDCO36SnMg9lNCCjA7uOAe3v9q72+sEDMJubHeKXsXPPIOZd\/BJMBjTU6VgwrQOasxcWRMycld676st\/N23zmvMY0VxNNvdOhlxDPZZdfUWgL2bBsCr0Bm3\/rjFVfDMZc\/aUWkaHns1C1rYQEMccpWd01Le2oHXCGDS0NkPTM2WXMkV6cDtfYXjjtmI4VCnHRSUcEuKMIzXkBuqU42E8hOlFOfblzBkbuBJXyBgk9aSsNDwMgJsMK2+\/2\/l++rvOxfi5s5Dv70e2thamKVw4jXweYFzYskNgWg+34EOX4LNXP4af\/3ypI6L3LzrTG4yzZBnAuZNAY2j6DOS2qRNyDvwY0K4BeNtyDE2b7nj6GaPHOPt8cA7DBM58\/1ps29GPbIZi2dyxQkSVCD6K2O2\/JgNeXKfuC4cGZtV6Njnw7P6DIJTivL\/\/a+uM4KQ1TVOYMBWmOzm1FwA89d1bnc\/zVFGW1iTTsxk0tLWgdfxo1DU3WWnBXOsCKSaHnwJR9QBU252tfwAAIABJREFUikth5\/cvGqbzhGJfHmU68zIaPZuR8iYkg8w4aETRj9gowARG0bQSL9V1sBE2HToMwBb3bVxk5Z0DROBEv+VvLoOZTJkDzVVuEbRPnojf3A\/ct+oF53jdmhc9rph+jb6f+PvOWiqi+AAMLF2GSW3LceNLo3HtEpEl2JYe8gWGmReuxsHDYpIsntGJcxe2OqK8TfBxRM9B0D+Yx4aXt3v64Y+K46A42XsSgCD+d3zxb3zONeoJYxYKYAYJMFCnjBrgKboZnoKaQctkUN\/SjJZxY1DX0gIto1lFQVyiH479b5hTUdBE6IWm65aG3teehyDd\/seFz3LLU091CjdNaSwsknYssDHORM5mL+S44tns2ofVDJKpyfHCoKvIO\/fzn0K2rtYZZDm\/vwqZGm+MuZ0STOa8T97yE3Br384aG0F7epzPhVFjkNv+KuJQGDce+clTnWQadYu70LNpGQg4Zl70EnbvG3J49NsXjgek1T1vcBw50Y8xHc0KBgDIov+rO\/bg2HGxX586eQLa21tdry8QrOlaH5iAF1z7WauYRHqRztYJuN50BGa+gD\/\/5E5nLOe\/50Kl6yqlGupam9A+cTwaO1qhZbJwmQ4BpWKLQDTqjE2a4qDyLp8DYIUC\/MU07b\/MYOCeK7xngXOnmo7f9ck0Tck5h7umPLiJNNyEH\/Ycs4uDEscU6kpQUkIQ613ZJkpVQhD7u5EfChkPYkkq\/mKi7qegZCKKhMptyCNit8MKBkY0IYhN\/LMvOR+jTxOZeb0TOUy7LX4rDObdSZzPS6KSO5RTzpyPv\/7FOtz2V3CIHxCfcz1ByUIFm\/jt1X7bn85A05zl4ByY3VmLqZOa8NwusRqv3HgQE8Y0YfvuYzhjzhRkMxmM6sg5ir3Aqk8INr\/yOqZMHo9pp0z2MQY43w8ePOwh\/mWfuRK1zU2+nio8+yIgsgGboBmh+bfH3pBMhCriJ0Q4+DSN6kBDW4uyEAjnHJpOS9KelwtRqzbRNHBDtvH7x833nVIpXZG16oeNdQrpJ1QaMU2rC8JjMJAboQxlyUYKyo0N1TS85ewzMGnhnAQDaK0YMcEVf7zlv3Hyv7wRdVHwm\/Ryr27F0KmiIsrxbgMTl65Ea1MNBoYMGAUTZ49vBgfw3G5hEjx74bRwEZ+oJAAv0bscnmDjxk3I2wRJCN7+t59Etr5Oen4CI1\/wDVX4uMk6YWaYzoQiAIhG0Xf0OFbf9QAAYNqSxWga1R5oQ89m0TJmFFonjUNtQ4N1b2nfT6jlf0GqQgLgJrP+mvCzSAY4JbO96bbclV\/uq1EowE4JBk7AmCFJCD4JwEJUSjD7u2kUPMRNQGAYBXitI9IKbscO2McZd67nVqqvqpcAllxzFThj2Lt2E\/au32wl9DDx6nMr8epzKwEIhrDww5eieexoRRNuMkV3Tys\/jMA5f\/tJNH3+Dqz7V2DexPAOFcaOh9HebvkBLBXmQGvlLxgcbfOfB+fCuWj2tNHgoFjetQOEe1NRM2gACA4d7UZHe6vFyNREL\/8GAL29fdj++g4UCq7zzdSli\/GWs92U3s7W0WTIDww6v1NKxWoese46oyOipQKve\/Xd\/+N8bmhvBTOZR2lIqYaaxgY0dLQiW1sTqAJECPWUY\/c7ChUDZpqRWvS4a+13QxQJP70eftFQ10ywEa+oi268NFmJUAKCZIlKAVnaGTkZLTQp6LE39mD7sy8oXRsXfeR9aB432qq4Ij+sbRlQmLgsc9nT\/\/lTEACDPwGyCiPkwLwFqF2\/1vXiO34Mrw\/U4\/QLVwfOnTN9PJoaarH3UDdOHj6BeZ1NODpQwIajYitw1qLToSJ60zSxa88+6JqOsWPH4NDhI9i3b7\/DvZvHjcGcSy+EXuva7Jkh\/AbsUlwgBMZQXrnvp5Rapr5oqCrMEk3DM98XChM9l8PsC88Rv1PqSBiZmhq0TRiLtvFjoeUy0DQpBRsh7spv\/cbBhdkTxUkA4NzJnSdyWcoTN14CME0TxMMSrWIiFvOz3XQ5818flADMQsH6bksAkPba9l2LlAAK+cB4pJEAiHTcLMjJSr0SAOfMSYBKQESptRGSABJlBWaGiVeeeAbde\/d7fs\/U1WDppz7m2SYQiBVT3hKIisCCeLRsBk\/\/pzBvtTTpOPo9gJoGhk49DUZHp1tRhwP\/\/qNduOlHuyL7tmThDHAQrOzagvPGi6jDP+09DAA4c9FccABDQ3ls2brdWdFFyWqxkmRyOZyy7EyMnzcrNM+9MB0FhylqxSIhTMC2gcMKO\/Xcp2DAzOex8he\/BgDMe\/c7vC6+GgWlGurbWtA5ZSLqWpvFWMuTmrrMrlwMwBbbxW9iAlucAUJBJsYtDQMAXEuHSPpp9TViC8CsEl8yAwi2H8IADAPgbNgYADMYGJeUlPZ1FpOz7zvSDCB0meKcg5smzHwB+f4BjJk1HW1TJoIVCti\/eSvyff0o9A\/i2R\/+HABwzuc+5fhrGwUDVNdANc0hfrtNNpTH2z\/3KTz3kztx4qQB7VPimKZtA2dbLbNx8rDenv486uvr0NRYb7njunhxzQb4M7+0ThqP+R+8xCltle8fACsUMNTTK\/qRzULTdR+5e7+ZBXevGFaFlzOGob5+r26Ec1BNd3wk\/CAgePUZ11zqF9s5B7RsBnUtTcjV10HPZKSJGQ0Wmm4sPeyUYnZ2XJtQVYjLeJNma6KM608oPccJ2rwI98Woewsbf7J00sJsOTLbAOXsZaYJY3AI+f5+5PsGUBgchJk3nBdglycuDA5i\/8YtAIDnLEYw+9IL0T5lIphhhkZGcQBv+5tPAJxj+U9\/BWYYiWLDVdj0yuvO56et4hk2MrU1mPb2JWgZP9Yz+f358gE4E9jM5z1BOnKfVbDNd55aedIe1z9pvcTvI3AAR3eKYCM\/YRAqQl6ztTWoaWgI1ACMBWcAyuMQ5PaJxmrAkxB4olTbUDOTpOG3sqUh5IxE7fg6lOJULm2dFLceITWAkgGY+QIGTnRjqLcPZsFw92a+jmZqajDpjAXgpondXRsAAJsefVI0nMvijI9fJkRhyRONmQzcMKDpGRBKsOyznwAAFAYG8OozL+Dojl3eF23Feuu5HBpHdaBtykTUNjeirq0VVKOx1odwBImvmLfgiKc+85EsMAZ\/i59skxfMcT5TSoUYr+uoaWxArr6uqL5WAsX653uThboMwJNchAvpwr6DpqmzDyVBWOFSQDARzuV7l2ds7ZgAQfxlabLsUDIAQghoJmM5BFkDxLioaGKaIq2UySxlBgfRNEw6QxTGPLZjF3qPHIUxlMeKnwm34rd++qO+wook8CJpJoPpF7wNaUbKu+P0\/q7+LY7wgtaLOIS1qPrd3iOGtS4rVFvGCYuLLLnouRxqGuuhZ8XqbxomqO4ywHKJ+GlAKAFYOuuAWmpw++560HmVZ4BtqzetdtRJR8OhmBncNt1Zb8fKMMQ5E+2XYPkQDcZfP5JBTkoGIPaZzY6yh1uDxC0ToVBWFWAWrH+GAW6lem6bOgltUyeBmSb2rN0IcI6Vt9+L+vZWzPvgJdYdeGA1dEU51QtVD1B64lO1oyLIuEkV\/cJ6DhzGoa2vYbCnFy0Tx2H8vNMTXfvGi13eXkgETShFrq4Wufo6xzFIMGaAUM3q8\/DKko7\/AiVCGo6ZyJy57s1+UE1sJ6LiDWyIPISqLUP089t1AWQog4CIbfWx+mFvYxKK\/Jxx51z7ftEuzMOr+JOhlgAohZZViNY2I+DckgJMwQCG8igMDcEcyot4d8MACDBp8XxwxrB7zXr0HT2OF269C0uvuVLcw\/p\/siFVCdLlgq31jn4B3rsGz+WmiZU\/vzcwSU7uP4RdL64DACz86PuRa6wPvcfBLcIl2pGWpHmhZzKoaWwQXpeS3d80DCBDoZWhLr1XoRjPTGSvPUIIELKXJ4TGBP3A8VUQhJKos0l\/lO7h1gWI9NIPaUYouYVS2esd6F7DmW0yJUGvxiKliUoiXVJQ6wURANA0aMhAr8mB1zPkDMEMjMEhFAYHURgYhGklv5h0xgLsXrMenDG8cOtdWGIxgSTEl351jr46\/Mwk56rvvf63j6H\/2HHne8fUSRg1bSo0StB3ohuvr1oLAOi6V6RSX3L1lQETIOCuFlMWiv2\/7MCTqckh11ivtDoQCC1\/0fUTY6DKdadSvrlMQDL4Jc0LYYnh6og99XOpog3TQiTwkJgTj4\/qU97RoguTWfEOYVYFR5qw\/oxwejBt4qK5Xy+lAUIICKWgugY9IxhCprYWmZqcm+KKczSNHYX+4yfACgb2dG3ExEVz09yl2N6V+V8QK2+7CwXL1Dnrgrdh1KlT0dDeagXiEGRrazB62lSMmjYVh17bCQDY07UR3Xv3Y5QVe2H3dY+lSJ280FUAEkKgaTrqWprQ2NmOTC4nMUyxSts5Br0KUcf3zh0J6k1bFjWqMlO2xVe5PZfIieev0LVR4frLLfMgQaj47MgZkoacM3l9lu\/qwlHW8WB\/\/XoDwBts5bmCEMk9WdrSeOILvCPpJ1rPWcT2xaCe7MOBtiwpLjiOqqetHEqXG2UQwcH1XBa5xgbUtbehcVQn6jvbUdPUgIkL50K3SnGvuPUulEJ4ArxM\/4rDgc1bnRc46x3nSFl6iXKFn\/Ou8zDnXechV1+HnoOHxRgw70RVmc2oriFnVfN5M8C\/DUhm63fPCfOtcNr3MJPS9DXh3YnaIkQ4gBFbmZiAtKogRVh5GYAEQgi0jI5sfS3qWlvQ0NmB+o42vOWcs5zB3fzoE6XepUz\/isOOF4R78qx3CHddWCtenDZ++tvOwqwLRA2\/FbfdjXX3P+Ica588wXsyF\/v\/bF0tqF5eO36lUIxWm2rJ30O6xBskVv+g7o96rGMddlLGXBRvxi4PKn93QkB1Ddn6OtS1NqOhswNz3vdOAEJB9mbF4W0iWUjzmFHSr8lfvpbRMedd5wEABo53OwlZRk+bGjhXz2aRyeVEDb8IJM7nVwT85bDCJm4o8SchjITEUE4BOSoVGFWFWKfM+hOGsIQnKpgFA68vX4V19z2MTQ\/9AUdff6MsfQBKKA564OVt6NuxG5MmjsfBEyfQMvNUNHQGw1ZlUF1HVtOg5bI49YK34dWn\/oyX7votFl\/5oWK7MWJ47VlRBnz87BnOb6HcnBBQTThEUU0DIQAzGIxCAfPefQF2rd2E4\/sOAggmDSWUQs9loWUzaiKSfyuzNckjaPu084RYYdU+eg8z41FKY1duJ\/V3SOQhs\/b9QpdBnMCkcOua5UYUkXswrkKx7JiUWGInJKbsmv8e6pTqnHMsqm\/CP3zxC8rrznnn+zB12VnKY0mRmgGsvfdBrHzxGdQ58fAuCoUC3vXhj2NClIKPEGi6jvYpk\/Aq4CjQ3uwQ3noC3PK7J5RCs0pyZevrkK3NQcuI8tzGUB79J3tQGBjAlMXzMZkxZFqaUbCyB9sglgQVJpJ6EFJFpyxQNEsptRzFvBGhqpOTiu0eBkJc5Zlq5eWWI5Dt5Sd0jbZjj9sPSilMhQ+C4+iDILOxIdydjVTPwO3qSJR4Epc4x5VJT7xgholf3vBV57tpmjh27Bg0TUNraysIIXju8YfwpX\/8Cg62NiTqlwqpGMCex5\/Fhs2iRl5PTw8O7D+ATCaDyVMmgxCCTCaDpx68FwvnLcWcyy6NbItQglxDPYZ6+1AYGECmtrbohxhu2BOhplE98ISILL01jQ2obWoU9vu6Gui6bjntiIjAmqZGDPX2YvBkLwb7+mEo8i4SSi2pQT1hNN8xzphaEomqOV4CCLFXYkF0wqxWga1IXAZhqT+q06iVrpxzDjBuReq518jBTTKYYTiSBKUktjCJfHNCKDjhnt+SShEy8a9ZvcajV9q5YycAYOGihbj5P27CO9\/xXox5+1uTNexD4lmx+TcP46nlj2NwcBBda7rw6rZX0dPTg2PHjuHJP\/zRc27X+hfw+vIXY9tc8JH3ifPvfShlt0cW2y3xf+L805XHqa6hprkRrePHomXsaNS3tiBbWwsto4uQXo1Cz2ZQ29SIlnGj0T55IlrGjUZdcyP0bMZL7EQkP1HurS0TrB8q23IxPgKeK6Imrm9WJylWmhq+eySNnvOYM6koAMpCtPiJxjJGwvJLCdSfATpB1CF93a0+JfIlqs\/rWiM8Rx\/\/48MoSElp0iDRmzq8bTte2rASjDG8vPllzzGjYOCiiy\/EwQMHnQ4BwO9+88vYdu0BL0ZLO5I4sn0nAJFLwIYTR09EFGJjexvqmpug57KhVgFCicjq29qM1vFj0D5pAppGdQiNv+QNaJcL9\/vQ6xFJR0SAi+1oNfywA7VckbwUKPbHFcrDRyiV5qXKq7G40UyTmv3nP\/8xAGBt11qsX7cei89chDd2qPNi7N8ncnS89tgflcfjkGgLcEqtcF9dv2594Nhr27bjzLeeib179wIADhw4gDFjxqCxqRFHX38D7adMjmzb8TIrcv+64\/kXceDlbaHHM7U1GDd3FsbOmVnR9Nj2vp\/qGmobG8T2IMHtOGMgGYpMTQ30TBbZ2hrhJ3DkGAZO9oJzDtOKswAEE9A0LVngDxelsGmC7ESKixPZFJLuiyNLZslQKP\/KGSyT1NWYUOrUfFAcVMrycdV+koQ9y0zHZpxda7rwgcvej7vuuBszJaUzAOzfvx9jx43F5R+9DBuN9FJAopnxg\/\/+nqdDMt79vks83\/ft3YcxY8YAAI5s3BLLAGa+63y8\/Ls\/4vD2nehUmMCU4ByrfvHrRJJDYWAQb6zqwhurhHRCMzoWfewDjkNSWtgrT7YuqLOww5ZrmhqhFeG0QzUNufo6aNkMMjU1OHnoCAZO9ogITEkUHYmovzBmFkWczPRp2GP28cwwnP24aNu0JJmIrL8pIRSC8YyIGQaoZhWR8RE2AZcsILZPbzL9hAoyXYWJ8mu71uLKT16Be3\/1a0yfearnWH\/\/ADpHdQL7diuvjUIiBhDW8VdfeQ0LFy1EPiTxx6QJE5S\/y2geL5jF68tXJWIAK392l2fAOqZORtPYUbC1vjJxUEvD23+iGwe3boeRz4MVDKy+8zcAgImL5mLCwjQuycD6\/3kMADBl8bzAMUIpcvV1oiCnHbEXk5AzwFQJgZ7Nor6tBVomg0xNTpEcRCT2EjZsbikWyw\/bobZs7VEaakc3FSK9rIEvXx\/iGUlgH6+LnIsih6NsCxU6BoL41d+5xGZu8sBK4ch6Tp3ohXOOHa\/vwEeuvByPPvwoxk8Y7xx75MFHYBRZZqxoPwAAaG1rBQBs2rRJefyVV7ZiwaLZidqKK5HUc+AwNj3yuPN98pnzRf27qDY5AyUaaluaMPWsheJHCrz+wkswCwZ2r9mA3Ws2YNRp0\/CWc5JpUQesoiF2TL4MTdeQrauFlnPr8nHGiirNRTUNtU0N0DI6uGE6+QU1RVucMcv7WOUnkPrWiRHlRJNabJeIIA6mkTYPQJpuROkswvtINBqrl\/AnunGalKBls6GLxvHjxzF+wnhc\/O6LsfrF1cjlcujp6YVRMPDS6i5g8rjANXFIpAR8Y+cbVp\/dTnWf6MZFF18YOHfSpEkAgIMHDoJGVsJNjleeeMYh\/jEzT8UpSxfH+ovbkDW+xArQmXb2mZh+7hI0jRFJRA9tfQ0rbv0VBk6cTNYhxcuxxX+PAi8hwiLCCKXI1tWiRooCDHMH5pyrtf9a8TzeTwYiMzFxAryiItnKFuVWAVfZKCtF2vp+TpsJ+qmSflSEPnfGIgDA\/AXzA8c2bdwEXdcxZfIU7N61B3veECXr1776WtouA0jIAD5y1dWBDu3bI7SPBV9a7I7ODgDAfff+FtPevjRRJ1omhHOu1b\/8DY5bD3nK0sWoa21O1KYMzrnw9fBx9jEzpmH6uUtQ0yCUnOt+8zDWWAU5VNj21J8BAFMWBcV\/qunI1tchV18L6rO5R00qLZNxQmZVKyolBFTXRXEPqlY+ee7FmJuEQkolngRJVlVCRDQch5BSVCK1yBJVHsIlSO8vH6\/sVR+vFmvUgis+hFu+\/V0AwOw5QQm6a00X\/vT0s+g9KRLZHj58xNlKp0WicOD2UyZjaM9+zJk3Gx2dHTh08BCWLluCXC7nsQwsXCTE7N\/e9z\/49298G6ckdFPseMsk7Fm7CR3TpnhcYVfdfo+Td3\/qksXO7+779b9I4rx8QoiwwVqONJquCXs6HJ8x56qW8WPRMWUSju7cDbNQwL71mzBByslnw2YA42ZND9w\/W5NFY2c7apsanckv945YuQ3dX4mT2FMO3OXcDesllHq84exrXYIgvuvddsBFVJ0zHooRi3SBhTtC8nnMyZlnedkRKlxZzWBdAG97VkYcHwOz7+P1jpO9\/+z3SZ1nYU6oLg+MjXWys6VQPaNpeQAKFREBiJr4\/W0H++i9h8q\/X07ZrnpGMS5ez0BCCNZ2bcDera9i7+69OHG8GwN9A3hly1a8um07ent6PUzu\/meexdjTvdaBpEimBKQU37zxZgDAR6\/6iEPogBD529rbHBHot\/f9D677p+sx9ewzEnfCntCHt213cgvKyj6Z+IEwi6Htekuh6RlouYxwqtF01yZtMjDTACuYYIbh5je0chuedt7Z2Pqn58FMhnX3P4L5l70nWf8JgZbN\/n\/tXc2rbclVX1X7nHvO\/Xr33dcfdLdtsEm3bRvFD2xIOiIK2iMdSHCgLQGNSnAiRJ0JDvwLFIkOJIFACMSBIEgwikERQsw46cQEkTjSTtN290vee\/eeXeWgdtWuqr1W1ar9cU4dyQ+Svu\/efarq7KpatWp9\/BasT7ek+q+UClh7Uqy+qm3JwiJaaRa5r429516V2Cjw6RvB4D1fcC2gjIVTXbk7ytbEjDTcF575sR+Gf\/7K6\/Dtz\/4NfOwPfw\/evb2Fy8tLuLy8dM98\/evfgC9+85vw2HPvGd0Pe3X81Gsfgj\/+oz+Btm3hufc+B6\/89AcAoFf5X\/\/q1+DvP\/d5+Pif\/iU898GX4amXXiwezJv\/8S14z8s\/AV\/8q0+7yXj+Z1+BFvEy+EJACOPeO9mewsn5KZycncFqswa5WoGUDTQrAUKuALSCVinQrTIlum9vod21cPvgIdw+ugF1ewsv\/fzPwOv\/+C\/w4K234cH\/vg2nd8MrB5YhJoQp9W2i+GjLuSnx1YxKAfVPZGMkop+VsgFLG6badpQREoV96WxuPOVpICLpVvC58Q3Z50SQiUo4ZNOAStKG420WDalpBobCVJDUU+97EVabE\/jk3\/4d\/M\/r\/w4vvfgCnJ6dwte++nXYPP0kbK8u4amXXkDXJHtMnMpAPr7xhX+F9Xcewm\/+zm\/AqjNIvf32O\/DxP\/sLuHz2Gbjz9JPw5A++t3BQ2pBjiD6hQwgBP\/mrvwzv\/vcbyYShZtV0dFkXsL1zCSenW5DrtRf6KkBKALlad+tPgxTSGAdVx2u4a0HdtvDou9+Bm\/sP4NGDB\/CVz\/0TAAB84Ld\/HQAAdo9u4Muf+iw8\/UPPw\/Wzz4Cv6jarFVw9\/QRcP\/sMnGw3qOqsu7F2Sh9I58EIS2C777Vegd0xwo1cdHdi0RmyxODzthCor6LKVeP+laoM5EOAAOUo22yof19Zx2XmgalsI0A4t6RRd8PimPa\/aocXB9Vt29lCdgDeNwbk3ex2rSnECXHlHXDvCUAbwtTut6aqUFjclFMZKKjqo20pvLjEmPkpLPXmf29bpWj4+f7q1I8fu0K1Nzfw8J13YffoBuR6DReP35uFS6BYdLzwc6Zm36c\/\/w9w\/403QQgBZ\/fuwve9\/OOw3m6zgT8ULp54DO6\/8ab5+o2EV37rNbh9eGNUamSlCmEk6ubywlTKuXMBq5ONq4vnf0CrjnDSe7lCCICmgVXTQHNiNvH2zgXcPnwED9+5D4\/\/wPfDt\/\/zv+DLn\/prePnDvwLf+jfD63f55BODsduEnZT1P87ln1KwU0qJrhPZNMz4vemwPvowQEl2wTv0GDB+QbAajZAADCN8s2qgvckY7LRXl08zDXwZ7Wa2AqvQCdgCj0NzcgLnj6fT7cdgtO7w9I+MMzpQeN8vvQpf+sRnoFmv4P0feQ0EmEXhn3QWQpg79ObyAi6euAfb8zMQK79GXoz8xGmlu7x7c5f\/0V\/8BfjCn38Cdo8egdq1Lv4f8\/\/bmP7UAonVcN22IEaobkEfXr57SvjMUR0Ye7U9T6D3O4WfYK6ZKEVWdR4F+4lmtWKTgpJwKo5ZEal4BR\/NagU7pNjrHMBsGubaMQ\/ByFgclo\/Ig13A7\/\/Ia\/0vNQytfZ3B7fT6Ci6feAy2lxfZ6wYnO81VphECVidrOLu6A69+7KMAAPClT34GrQLcD8mQolIX837zRRltiYU5LJ7Rk1jS7VONMctnFW40nKEor4E0q6araYBx8gvyPboeiO9jnAyD6IXiuAwKqh0WdPXHRFUfSpVP+\/9PCVaAD370wxCGWopOPbTWPnMCn11fwcVj92BzccZ6gVyfdHt761RAISWsz7bw6h\/8br59IaCRktyIJL9cIgAIoNMSbOBNt7YwuumlFhG1DY33pC\/lZYlB2Fb0zGOY50JrE\/rsTnMrKAKBMf36QxlMTbGPvu9+XkQ0Lv\/v+cAiTgDRkqhKABj4\/lBwkyuE4cY7vb6C83vXsN5uWJLdnjYAnhWdfLZbeF65qJPtBl79faMJWHvE4POTTdZeU8SC8LuITxTiTJo8FqyF7IJmzAlHJRdNAyA9TSEjXGilQbPHBYBvSK0UKDSBqFubB97EUzCzk3g88JdoK8VoUxnn6g6cXd+FlauOk0bTeSk0mIVbTlRhhMD24hwef\/45uLh3F1abDewePkKGOl0KlCwk1bZd7jrDvjHSvx1f+zlluwD6Ml8UcgKgL6c1hxizY2pYiUU2I9GGVmvM2tqPFOwaJVFZfEGMegSAGFqZLHPOenMCm4tzOLu+C+vTbWfRTy9ETJUj6bKI5\/s\/Arzyax+CB\/ffhftVBIqPAAAYJklEQVRvvAn333zLKyFOR5zlkPPP+3H\/2BLSSs8f6DMXRi58nC+PlyiEk2sK4uchfE+BISiNHZaMlN\/4qYo3P0BFAgCDkA1sLs5ByAbWpxs4Ods6w5POrAdMoGBWa4vcXUxIAZvzc9DKpIV+9623vQqwQGsA3R0REzzxGFMCigY\/i24p4Bx8AqjbAsUQTGsq076fZUeSjYTWK9zpI+cmNN6L\/Gaue7sPUfXlRUgB69MtnF5f9Vl23maj1MwmUUADW3js+2EjYXtxDuf3ruHk\/DRQ\/eJsPFMgJIxf908nynNh28DSfnEst\/k1+Y\/oucLUX1LYznBaxgJUdQFGft+xyk5t\/nhdsAzO3IFWgmoEQMoi3qwaR8oQYyAEGHfxWAgkJzb6m2waOL26hPO7V7DanIC9AwpPKAkpvTJhPjSLH8Dm9x8PCjcu8t24vnpW87Kzzie0DCHCeZvcp9VM\/b5mpDJbCvUIAFbJJXyy\/MXDPc3ZXHaxcBAAzfoEzu5ewebiwnH228w91sZlnHS7G2ZAymKCIh6jxivljD21fe1pnxVysfHmjHj+P1PMwZFt6tCVfzmoRgBMwtg12DHAmlx8fgShkALWZ1s4v3sHTk63sNps3ObgGOXmPO2WBPbt4+835pTbWZWbcwKPPKGxdilZlZozYgX0bUZXO7BhCTNpFkujLiNgwp6lW4Wyw\/iPN6smKQuSdlytQLUhg07KltA0K9jeuYR2t4NmvYZmtZot4syi3bXJMXAx1k\/tZx\/6kFJmC2QkFYM4ryPFlkt4E4zFPzkEpN9ERR6ekd\/1fegQ3rlQmQaggZ4FTS6qnC88\/qs10GFQLsItdzIBrDYncP7YNZzdvYJmc8I+2eNCmxQ4KiTnKjN3oIrP9y8kfu8hw3WR36e0gH1FyuX4JX34AjE1R3OxIi2J+kfYQXZMuC7k1E4CQ43E5IZsmmSoK2fhycakIq83PXNvfFqiF4sZab2VLQBiE4P6XmbrI0Y7MKKG32lKEFAMam6zc+7mgXes+\/MW3OORU4d97anfBng8AgA1vmgdlLyiFteYrZBaxEHbQgSSnhemO9PmFOYq4tAJR3s6W0q0uZHy2GTf2542RSm5p03V7fMu4jyDHqLgS9QeJlz36Bgocbtwp80a9FinFbKXc5bxuexDhvmH8WDl0Wg5jIp2xIz91LUvEQTkF2b1k6AslyCZ6DWSXXjfqEwATN8Z2GSWLn83CjS9NASVPDK2bx9Tw3ytAJtem68EC\/QVB+50lnfU0q90F4tBeXDC+WoZRCGyaZIbepBjckQCtzIBsAxE9N8UYl\/3KF\/uTAsgZyvIJjdZW8kxuKQyY5SrFcohYLR077PBXZ7oqhMCnM3Pha8JZEuIV4S6BMDC67SWaeGcyHNFqCmPmLNmZI16OUEsxDBBpCDAZw4sUhZ9YRzJiC2nPAS7eO4XTuX0TTnQsRY5BiqKFvyQcGWzFtg8aQGgeX73QRIhPXFLCsWDFG8diaMQAL2V3UgA54NmTuIwqBVfGJTfdu61kjvNTGBMTuoItgo7hQ8AwGwW1ZFyWO\/CEhuIMtKxr2EH3nfuPWtwHoTata+jEAAUUCu9Xaz+r7gNlk7WyLkVUoLa7SLfcx+aDJD3QDBjiSYhGVU5QgjkvSMieKemkEvLLjW2qMuVAUMbVvqZw4aFVy8AUn5Uv8hCX3oLzEnlqdnonGhNkEgubytww2xbaHe7YOOzPu9F33HiFaYuMjK+oqNDn9qODxNmrLr5szPBP0mHJCozUKNpnc3gtNc6jLMxdVXdr4dmiPoFACNZhHpmkPbb\/bd3r1mVrbOWY8QWqYlP5cgTE1tE+4Xce+PCo9iCGwuypkDu5JZMIcCOoBte2gD4blEhxayeOLuODB+FGPzNCOHypKZDn\/4AVQqAeVU2ldMEXLddzRwbVpusE5\/HYupohVdK+560UkHgzLjGsF8Wtkew\/sRgCZS4mKmUThsIta+ckAyvTFPX11yoRgCMWjRcI6A3URQTD66mjZ8g34jXk0\/AQLikmH\/8e6+1EaB9HXohRVpIX7rMe4TpPcCuCf6nZEbbcCG9Xmk4ChxtjPLYjEnp9u07+iBBWkNUIwB6lL0QrtiwhTnR1NJEK7kJogyR\/Y\/pttkZYylbyAEXUTIbzn73bnhjKcODb5eYcBXZhBbF4JXzws2oNXgoVCMA4pr3XHBfZSDt7QlsEwoTOffZmO4+KTE0RDJBxaELv23Pr6yRn7J36wUXXFL4YC8j8YLajpIb6SXob\/CMtlpe+aafxuHg98fMOlSqgO9xeVQjAJZGs8LSf3l3xRwo4xlHTVStchVmAp46j5seB3+x7y0jbbAxrQTrf0VtuDQrb+fxcPUChOP90xqIoh3MPCmlUEOyMe613ndKpwh7vp10X+YLTCrpPScqFABRPn1qgzI3r110S52DU9RN0TRJQTHH4b2UOjzwsvi8jZGL1edLiAOJ4oCmJO\/eoL\/gqWw7KTjBG2lUTrMTwmiEKGlrJhOVuCoeOlCoQgEQIs240pj66jk3VeaeXZo7zkYuk9BZk\/n9o8vlAIuI5gQQoFqFG\/M6I6j5WRhBwNikfHdZQS4A0IcLx7VquBbC9sn2FB6RMDeF3BhULwAo+FZmrXBV2anU9t9EW4fwx8aTP2kMBzhE5jI8moIdDepjB1h4blC2n4L+LB+AF4B2bKhGACRffPReMZedNer5d2gLSsXmTtfcVnZM8qe0AM1kJ+L2RYHyhsRq6tj3gdNreS7awshCgMGFsXgsseApEzjmc6nciLBYTH2oRwAkFlWwSBLqPJWFlbPk5+5hXHowDG0UzZcKKd3dDmsBmBp1wI+iGzbAfpRMkgrU9JRhMtN+oc2GhRk0BCt4pvADcO0WtaEaAZCCkKJ33VHPZLJjUpM7xSLLNTQZ7sD8wg6+o5cco0aE\/M5pabbvd4owjOVL0vbRCa7aOfUoYJu\/xgtCXW\/X5fx71uMBhRPh8uGw40wAulgJzvrhYzQNeYy2yxIUMrQQCxBkvkKowRhLvBCiK3iiZjESGuPeYXjuTNWlee0D81xros8I4vfUpyuwGVQjAPoN0llMtZ5d+lvh4b92bh+uphx4zLH2b5lTsfR7DBaGEK7WoAYvi7GzpIPWPfOPiPbKARYZdqUqFR6DwpyeGzEstJoTbpSlPwwummMzOhsGRWUej6EC4tBqBEAJjNW\/dyexTzhkkouMZNHG90GpxmNZi6ywEiJhYGIu2n0vNMmoZpQNscaqOHfCLvjdyPdrSU4s0QkXVH1EFRkzjwXHM9IO\/mkacEFadTfbQBRxNyP8RSsaOc7PHx7f6QOOnV17WFUTE45Z9X22MS9gexe+C1odo\/fP4agEQFaV1unFLlbN+HtjgbAY+PhLV4h1UdV0khR6IarhNFxg\/8tGDouCHikqWmFpsO\/qyo8M9GLsA9rmPlKNa9VmXxUY\/uD0x4XrjyM49rUINeiiOgVq1\/Y5Dgdkyz1EqK1SuoooPw7qFQC+Bbz0JBRDQx0Gsyl5G4hNSTWB2NJt\/m6jcTb3nIxAZB9+MAvjPWgdVSks5Q4s0tIyYeB7FgAqEbNSo75QjQCIJ73fSOUTOHDxAJB3yjldW6lYBO7kD64PLM4\/DYiN2RvXuE2AfYqV04+NOcp0TI2JjNzEIgl1PgYEbUspVzvRVjtmfzYT8+\/D1zy\/FwnIRLDIiLdWzL2emODJQsAtaD2KKSZuywfH2SUaCULEG8fToGZWR+dgA06OCeEEtBWQ\/TZdu5nhDDTIaKOqtgXQfLV9Smh2bahQAPAW13yqXZdr3rbFufeYC3LK4iBDmZVKaBBR\/wrPxJsTqY2CW\/yJ0QfJWkigj443ushSguHdhLH+\/gXFbv7+WQb9OGbTOFKDYFUCQCskGj2jmk197UFWodaRNiA6ym7h2F8F2GAbplGyYCyqLf82lB9cdQSdcxijSmwwfcBU92+ma9a8U9EFV9pNj4U9jrQpWGHtCwMkAGhMVR9j8\/ieAJgOARATTJaGsXLU3VyLVgjEC180eEhqjPF+dzoZh+z1wIQSFlZ4uj3WEWiUQnV38xRKipLE2pC99wPQV7+c0NRt6w4GgQQnHRPqEgAd\/MSdOa24sSqammghvASkXgP1W0v0Q5x6jHVSQ3gohljj8TepahWpApMaCvU9NV\/jsBoDFQ1KXoWEGH1ih9Rlwo3jWFGlAOCA8t+nWXg9d1ZikQ393b06OkXV4xgbW+KZ4l7nXpRIc1opls2jiUKDSartCcLPr5ZkciP63A0MWs2Xa5Ks\/FOpQLeoVgBQWX9zgRIU9BVijg3F28ZzuCaXiCK0d2abiFRy1YmFQIyi70z0KxsBoAFUwbjQsmzEx1MVio9VB6hWAAiRNyCNiYKzpJSgh2e5y\/RDIFkVe3n9h30O4V8\/kgsL\/aMAAQK0Vl246liPQNT4HFZuIgYAFSSDFGd\/KBr9m6ba4gzNSzmmWIZTAhxLEprEnbAnVCcArETmRpwVtS1EeO\/Xnn9Zg6sPELca8g+qSa6HnEoY00tprYN7p3\/vFQCd4c1PcILOmDp+jBgwQpISLcPfDLLpDXEk9fkINmhsxWBXNpLQtIC3YTikMHGL64o9dKJWVQIAe\/lpvnjgW2BFeFIgDbm2shnmC7kmU5x4jrK6oL05iTsxyIaXG4BGyEnRCVM9MTPTCw5SPDdeXisqG4tS2hUscWzBMxPFLIWqBMBoWHW5W1T2fzFBKJc2zJ86akNS1wENMEpdHkOImYMj0RhlU+jPTnLDsGkY+IlQo4WB5veTE4wlmYyj+RErMQ4ehQAgy2dlpGd8B7Oq\/FwGG5SKPPdvIQLh5P7H3Pxjxj5WD5jF7DnSdtCs1wWdhHORjSOYy0OS+G6HPtm5qGaU+dPPe9mCG7HlhXh6E3K4W5fRRrDvyj1JsLEvFfqbe0+c4qaTSqwzoi2V0qjRbuoed+vF83z48xaHFMdIMhVFHzuksKhGAORg3YJSlqmI1r0kpVxk4+MlnyC4ilhrvimbTV0pJmxi9I4dTu2octaZv9sxLxcIo4eakhAuTiNF5zV1TGQl6aZxMQZp8OJRDo2jEQAAMCjFxIVueca9sYjrFgxUUMfwg5z8wWPjRVRQhw87UUa0nfpE4IgbOS9TEGcHYpAThMAxcPrPgSMSAGK0qisEribGmGKE013yDQWFFpQMf0UFw3A2GJW\/UAIqag5\/No8lXVwsoTNBAByKAn3fqFAAUIE4w6qtrNZscIcXxUUtC9QNOdNCoE6jQeY7m7k4r\/YfGlMCp3Lu34ZtNB2+d9b1YFHhVc881TMSJtghwpg7qVMbXTirN8dFVudSCAEgZT6mAYbuIeM12I\/ZsjTPYZLGtKcAGExT4PQtRvAOHCMqFAD5ySGr9Lgfeaqfhl4gJJ\/zNmCpUilEaBPICQHbk0s1FYePFktCmPj7+MVki6UcMIOO8z45tQ0yvUz8\/H5QjQAoWeRCNkZD81N1ocvwIhaWf8KXTk1QRSb5YDROIdATiLzrg1EPMVtHtTRUnTvMRrVZ9Tb1npRShlyFUIWnFOnEMJfKbdccR3gtzco0F+oRAIwXZhhu4iHr4PRHK8pYlt1k\/9MktmgaUFq5sFApG3LhYfHvQkqAxEI9JsaZFIGJbtteaGOUagtpOzkSEBQ249F5HDpvDoPmvFqBHaEaAZBDCbHlIAuLIbGpPHwOBnfhKDEEg\/J86KX1CQ2Qu+2sp860U04i4bTY+GKX6dLW95J3lHp2zsrLh0RdAoA4hccY6MziTG+ukOBH4b\/PgDwNOEU9tGYJJ\/d8QkvhFhKZE7nNJDs7hlOZkfHZ6sVFNR5Hwrpqj5nBZ25UJQA06GEOe3ayiDt\/0\/QGtBk2BnoyJXzROW+F1RrmTgqpxn\/tCytCy9mnwApo5uZiAiI8BccURFSVAAhgySM4z2Ww1KZInyS0dyGIKYcygxHaY1yBZg9uw2x1X4rkw2ZmmkbmHxgTWeJPztiI3XMsBkCAmgWAhyQVE06pg7Qxs2WZYQgaagFE1p\/WgdEoR581GMuguXkWoG0XD5BK9JHZPJzqQHOCOpEpIaDaFnTbpq8LURxJ\/2v897WiSgEwKI8FBGsM+Xmee6l0nqaWFU8JDQ2GVjt5Mh3o6op\/X\/rt8ZJlCFV8dqEgkmsnHkO72w3zKlxmIES1BDSIpvF4KDpeipzBuiIBUaUAwIDm3o9IQsHUM1tAI3VViBcK9\/7qshi5oauzrf95V1lJngAGSgOTna3GYc\/XAkeaElGvDZ7RAMN3Sr+TlJ2Bk5eyLxyNAAAIN53NDCwO6okq3cbSWrUtXsuOyPDL9ldQcw4gfd3B8gn2pUb72kupTSXvLegKdNoKPgzsbm6LxkDB9pkzxqbiMLA5OBZPQ4UCIJFH3SrQenxasGvHcv+lSnkLAa4MFZXIs4CxjYpHEADoODDSjEWSTVSfmz+sm5AG7z3ZlOk8NZrVqnjXMbrvII17VOhvRbr8SNQlADSQm01IyTK8sVEooalTjF7cpv1Sgx7ZP\/UHLMV4gdMnPgG5QoBrfI0NpqJpAAhGoEEUJTuGwCOGHbRR11bYF6r61iZoxPPda22C6kQfTMI5\/ZNeA87piCym1J0ftU+IfvOXxra3t8PnD6FQOlNXlrcfx9TiLpZBKTQRJE5dzPujVJijoGco4c7EMVwDqhIA+CrvY7DNM9NeqjP6pMI8nQo6si\/EtlAS8KNs7YHOpWQW\/cDZVzikCVNNbDo0QrO7opXYCXIGVdFFObqrG6Ulen+zG903Xgopk31R4b1jApao9VVbsZC6BACBMZFVLUIAYuPubYVYy9fHRWpR2zHKRg4CfQDKy1X1jqb+84NcAKMuxZ+O\/mvbXPA0crkyvbBeFVBrpzQ20374HbNXQe+1lCRRUYIlayB0pdilY332Go1iHuqyG1QjAHLqUrvbsbKw4jaFEKBTd0StAQJOv\/F3dinTcebZhd6Bul\/rVrmilsInR9V9YQohxWCNLamI7oPdBjOMLtVvabv+ZrfxD+Q6rfBKUI8A4Lz4kcKTYye2XP2htsHssBM0KD31oKdp4AnBkOikJJOyFCmVttRbgAGzn0zJIciNaRCERvRlUro9nggsvfsIcByjBOg2WEHMPKHy0gU3Q04B3WUT5sYUSHVuBmACq1zmY6n3YvRmYXwu88hi146MGzfxQXb7vs0BFQq59yrEQFjXyBFwVAKgpBglqcpTE4dE+g0FjnDsvuR9MbcwckIst8FT1WiWUjGJdtsdIxhnYbW3TMiM9yDJzi1p6xmye6xcE6hndAyJOrpp\/2eyMiw+JhuaILrAoBy493wcU4hL5t9ovvEU\/\/uymxuLISiuCB06EbPP60SY7hiNpnZXYDUCIK3eL3yKJFxk+5xA2TD6ItTPUgNpKew70torvtrIpFxWSnVhvvO9wxpz7blCqaaKQBbVCAAWxrrlcw\/MfFdNLoiJKqHzVXdut72RaggvPsEfD5lS26vKQtAl0ShUzYQc44iGGqMuAYC+SAFyZdxrU4MosG2eTr\/FBUNuHPQpNYOgcU14FuhkcJxgb6axKn0QR6\/p95PTUrRnfPNoQ8B+V7pMOc1EHMcB7JsxqabMPwxVCQC\/bHYfQBE+M2ckVU6951afQRFnHdrvEruLxvcQdhfdl23Ak+iChaaeqDnbhs2YzS14Gyxj4YKxiGuNH8JLfYfUNMZCLfse5i4IEsRu1WcPqEoAcNVEjhDAq\/YaoaLaFlTbTrLQ4guprwNg\/4wJmbGbMYyAw+PetSL49ier1LQ\/3NUlZC5wIY03RXnRk+Sz9vqQyyj0QoBtOHIMKyRToxSgSU2oj\/hrutgKPxIT6S9apyVerH2hrhEJ939ZZDeRz+pCpI3ubm7ooWQWc5wFaCr5ROG3Y12FY8bk\/Y1KwpliQEOFsx7XZmzwZeUpZOZDCBgIOcszAEIEGlL27UvhwsUBbNAPkvDVSC9\/IGyVPIAqQ1UCoOQOSqbhCm8jMtJEOcSdFFTbmpiAUiPiLAJAs\/\/GRXhf9tR0JCBGt4pQ9xm+9hHXuFy+firIJhac1AjJugXZZCXpjLJOKFLXFWRdHdLgWY0AGKOOhwtJhPHxCOIEGwAvqitIOuRv6KluQs7UE0sJ\/THb1sTFZqnTqCSb0WHHGS2Afs98I2cOYzUkAcJ7Hzr5XVBtNFPwZUlUIwDGQivVFaBA7tqEluA\/6WdpuRp3YmFr8QyqoL8Bsc1BjX\/qZuk3CREclPlqtMY1wR6zt9iAeTanIRLN11DcB\/4PQWMBn7NfYBQAAAAASUVORK5CYII=" } }